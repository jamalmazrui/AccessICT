<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="A. Jonathan R. Godfrey" />
  <meta name="dcterms.date" content="2018-08-10" />
  <meta name="description" content="Getting up and running with the BrailleR package" />
  <title>BrailleR in Action</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
    /* CSS for syntax highlighting */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { color: #008000; } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { color: #008000; font-weight: bold; } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
</head>
<body>
<header id="title-block-header">
<h1 class="title">BrailleR in Action</h1>
<p class="author">A. Jonathan R. Godfrey</p>
<p class="date">2018-08-10</p>
</header>
<p><span id="title_page.xhtml"></span></p>
<p><span id="ch001.xhtml"></span></p>
<section id="ch001.xhtml_preface" class="level1 unnumbered">
<h1>Preface</h1>
<p>If blind students are to truly gain access to statistical analyses,
they will need to be able to successfully complete a course in
statistics at university level. To do this, they must learn how the
graphical techniques used in the sighted world look and are used.
Generation of tactile images can show blind students what a particular
graph does in a general sense, but greater understanding will come from
generating these graphs as part of an analysis — in the same way it does
for sighted students.</p>
<p>While sighted students can make use of a number of graphical user
interfaces (GUIs), blind students are restricted to use of the
command-line mode of operation or typing out an R script in full. One
key benefit of the GUI mode of working is the ability to quickly
generate basic numerical and graphical analyses. Blind students need to
gain the same information as their sighted peers without expending too
much additional time and energy. The <code>BrailleR</code> package aims
to bridge this gap by delivering the range of analyses commonly found in
introductory courses via a reduced set of commands.</p>
<p>Once blind students have completed their first course in statistics,
they may embark on research at a university, or head out into industry
to apply their knowledge. Irrespective of the direction they choose,
they will need certainty in being able to independently create graphs
for the sighted readers of their work. Creation of tactile images that
provide the same representation of the images to be placed in documents
can provide a solution, but all too often blind people do not have
access to the right software and hardware to generate tactile images for
themselves with the immediacy that is required. The
<code>BrailleR</code> package aims to provide textual information to the
blind user in conjunction with the graph that would be placed in the
final report. <code>BrailleR</code> does this by interpreting the object
that is implicitly created whenever a graph is created in R. by creating
an appropriate and concise text representation of the graph.</p>
<p>In summary, this book presents the work included in the
<code>BrailleR</code> package that will assist blind students
successfully complete an introductory course in statistics when other
software options fail them. Many of the functions support workflows that
improve the efficiency of blind users at all levels of experience.</p>
<p>I’ve tried a few ways to help get blind people using the BrailleR
package and needed a place to combine the efforts easily. I don’t yet
know if this e-book will turn into anything but a few webpages, but
let’s see shall we?</p>
<p>Jonathan Godfrey</p>
<section id="ch001.xhtml_citation-details" class="level3 unnumbered">
<h3>Citation details</h3>
<p>Please refer interested parties to the online edition of this work at
<a href="https://R-Resources.massey.ac.nz/BrailleRInAction/"
class="uri">https://R-Resources.massey.ac.nz/BrailleRInAction/</a></p>
<p>When citing this work, please use the title, author, and date
information on this page. The online version has ISBN978-0-473-41495-5
and is preferred for citation over other formats. The epub version has
ISBN 978-0-473-41493-1 and pdf version has ISBN 978-0-473-41494-8; these
fixed formats were created in October 2017.</p>
</section>
<section id="ch001.xhtml_copyright-information"
class="level3 unnumbered">
<h3>Copyright information</h3>
<p>This work is licensed under the Creative Commons
Attribution-NonCommercial-NoDerivatives 4.0 International License. To
view a copy of this license, visit <a
href="http://creativecommons.org/licenses/by-nc-nd/4.0/"
class="uri">http://creativecommons.org/licenses/by-nc-nd/4.0/</a> or
send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042,
USA.</p>
<!--chapter:end:index.Rmd-->
</section>
</section>
<p><span id="ch002.xhtml"></span></p>
<section id="ch002.xhtml_introduction" class="level1">
<h1><span class="header-section-number">1</span> Introduction</h1>
<p>Access to information is crucial for a blind person’s success in
education, but transferring the knowledge about the existence of
techniques into actually being able to perform those tasks is what will
make that blind person employable. This paper is based on the author’s
experiences as a blind academic in statistics who has often been called
on for advice by blind students studying statistics and their sighted
lecturers wanting to provide the best possible support. Unfortunately,
there is little information available in academic journals or the public
domain to offer the statistics lecturer who is about to teach a blind
student for the first time.</p>
<p>At the 2009 Workshop on E-Inclusion in Mathematics and Sciences, I
was able to meet other researchers and scientists who are also concerned
about the low rate of blind people entering the sciences in a broad
sense and the mathematical sciences in particular. <span
class="citation" data-cites="Godfrey2009AccessiblePaper">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2009AccessiblePaper">2009</a>)</span>
presented my first formalized summary of what I saw as the current state
of affairs for blind people taking statistics courses; that work
discussed what was possible in theory, but lacked evidence of what was
happening in practice. A collaboration with the only other blind person
to gain employment as a full-time Lecturer in Statistics led to a more
comprehensive review of what we believe is the current state of affairs
for blind students learning statistics. <span class="citation"
data-cites="GodfreyLoots-JSE">(Godfrey and Loots <a
href="#ch014.xhtml#ref-GodfreyLoots-JSE">2015</a>)</span> present a wide
range of issues that blind students and their teachers must overcome,
often through use of the best software options available today. R <span
class="citation" data-cites="Rpkg-base">(R Core Team <a
href="#ch014.xhtml#ref-Rpkg-base">2018</a>)</span> has featured as a key
element in my recommendations for teaching statistics to blind students
<span class="citation" data-cites="Godfrey2009AccessiblePaper">(Godfrey
<a href="#ch014.xhtml#ref-Godfrey2009AccessiblePaper">2009</a>)</span>
because it offers the greatest opportunity for meeting the needs of
blind users.</p>
<p>An invitation to attend the <a href="http://icchp-su.net/">second
“Summer University” event</a> was taken up in mid 2011; the purpose of
this event was to show blind students and disability support staff from
universities what software and hardware is available to improve the
success rates of blind students entering the sciences. This was my first
direct opportunity to show blind students how R could be used by them,
and the relative merit that R has for them over alternative statistical
software. I observed blind students working with R and struggling more
than I thought was truly necessary. I knew I could do something about it
and have spent a lot of time doing so ever since. An R Journal article
<span class="citation" data-cites="GodfreyRJournal">(Godfrey <a
href="#ch014.xhtml#ref-GodfreyRJournal">2013</a><a
href="#ch014.xhtml#ref-GodfreyRJournal">b</a>)</span> followed which
exposed the needs of blind users to the R community and also announced
the initial development of the <code>BrailleR</code> package.</p>
<p>The <code>BrailleR</code> package is my attempt to help blind
students and their lecturers. It is built on functions that I use to
work as a lecturer in statistics. It aims to make up for the inability
blind users have to work with the same extension tools their sighted
peers are using, including the increasing number of graphical user
interface (GUI) and integrated development environment (IDE)
options.</p>
<section
id="ch002.xhtml_why-will-i-use-the-brailler-package-as-a-novice"
class="level2">
<h2><span class="header-section-number">1.1</span> Why will I use the
BrailleR package as a novice?</h2>
<p>Blind users will want to use the BrailleR package while they are
novice R users, but may also want to continue using some of the tools as
their skill levels increase. Each of the following reasons for using the
BrailleR package are expanded on by way of examples that go into more
detail in subsequent chapters of this text.</p>
<section
id="ch002.xhtml_brailler-improves-the-accessibility-of-graphical-information"
class="level3">
<h3><span class="header-section-number">1.1.1</span> BrailleR improves
the accessibility of graphical information</h3>
<p>BrailleR converts standard graphs created by standard R commands into
a textual form that can be interpreted by blind students who cannot
access the graphs without printing the image to a tactile embosser, or
who need the extra text to support any tactile images they do
create.</p>
<p>At present this is limited to only a few graph types found in base R
functionality. An example of a histogram is presented in Chapter <a
href="#ch002.xhtml_VI">4</a>.</p>
</section>
<section
id="ch002.xhtml_brailler-helps-gain-access-to-the-content-of-the-r-console"
class="level3">
<h3><span class="header-section-number">1.1.2</span> BrailleR helps gain
access to the content of the R console</h3>
<p>BrailleR makes text output (that is visually appealing) more useful
for a blind user who is reliant on synthesized speech or braille output
to interpret the results. The first example of this kind presented in
Chapter <a href="#ch002.xhtml_VI">4</a> shows how the summary statistics
for a dataset can be made easier for a screen reader user.</p>
</section>
<section id="ch002.xhtml_brailler-includes-convenience-functions"
class="level3">
<h3><span class="header-section-number">1.1.3</span> BrailleR includes
convenience functions</h3>
<p>Many analyses get repeated over and over again with different
variables. Some people like a graphical user interface (GUI) but none of
the GUIs developed for R to date are accessible by screen reader
users.</p>
<p>BrailleR includes some functions which generate pro forma analyses.
When these functions are employed, they generate an HTML document that
includes the analysis in an easy to use format. The R commands used to
create the analysis are stored in an R script file so that a user can
modify the commands if changes are necessary. These functions are
introduced in Chapter <a href="#ch002.xhtml_RMarkdown">7</a>.</p>
</section>
</section>
<section
id="ch002.xhtml_why-will-i-use-the-brailler-package-if-i-am-not-a-novice"
class="level2">
<h2><span class="header-section-number">1.2</span> Why will I use the
BrailleR package if I am not a novice?</h2>
<p>I think some of the reasons for using the package while you are a
novice R user remain relevant to more-experienced users too, but perhaps
the main reason for continuing to use BrailleR is that of efficiency.
The convenience functions introduced in Chapter <a
href="#ch002.xhtml_RMarkdown">7</a> give you a starting point for
analyses. Behind those convenience functions was an R markdown file that
generated the R script and the HTML document. Getting into markdown is a
great idea and will not take you long to learn.</p>
<p>BrailleR also includes some tools for helping run your R jobs without
running R. Experienced users do this all the time so these tools aren’t
really meant for blind users alone, but as blind people often find
little inefficiencies tiresome, I’ve incorporated the tools I use for my
own efficiency when I think they might prove useful to other blind
people.</p>
<p>In summary, the <code>BrailleR</code> package is my attempt to help
blind students and their lecturers. It is built on functions that I use
to work as a lecturer in statistics. It aims to make up for the
inability blind users have to work with the same extension tools their
sighted peers are using, including the increasing reliance on GUIs and
integrated development environment (IDE) options.</p>
</section>
<section id="ch002.xhtml_references" class="level2">
<h2><span class="header-section-number">1.3</span> References</h2>
<!--chapter:end:01-Introduction.Rmd-->
</section>
</section>
<p><span id="ch003.xhtml"></span></p>
<section id="ch003.xhtml_History" class="level1">
<h1><span class="header-section-number">2</span> History of the BrailleR
Project</h1>
<p>I am one of only two blind people in the world today who gained
employment as full-time lecturers of statistics, that is, teaching
statistics classes and doing research in theoretical matters as against
applying statistical techniques. For years, I tried to keep my blindness
separate from my research but I took some opportunities that came my way
and heeded the advice of some colleagues to put more energy into
improving the ability of blind students around the world to have greater
access to statistics courses and statistical understanding. This
document shows you a bit more insight into how I (with the help of some
useful collaborations) got the BrailleR package to where it is now.</p>
<section id="ch003.xhtml_my-background" class="level2">
<h2><span class="header-section-number">2.1</span> My background</h2>
<p>My adult life has been centred around Massey University, initially as
an extramural student and then studying on campus. I have undergraduate
degrees in Finance and Operations Research, a Master’s degree in
Operations Research and a PhD in Statistics. I was a Graduate Assistant
from 1998 to 2002, and then Assistant Lecturer from January 2003 to June
2004 when I became a Lecturer in Statistics. I was promoted to Senior
Lecturer in late 2014.</p>
<p>While I don’t find it important, I do get asked about the condition
that caused my blindness. It is Retinitis Pigmentosa. I do have some
light perception, and can make use of it in familiar surroundings for
orientation but it has no value to me for reading anything at all. I
chose to work with screen reading software when I started university and
obtained my first computer because my residual vision at the time was
limiting my reading speed. I have therefore operated a computer as a
totally blind user throughout my adult life.</p>
<p>I did not learn braille until after I completed my PhD. This might
seem strange, but there was very little material in a suitable digital
format for me to read throughout my student life. Things have changed
and I now spend a lot more time reading material and doing programming
where the accuracy of braille is absolutely necessary. Braille has now
become a very important part of my working life and I have a braille
display connected to my computer most of the time.</p>
</section>
<section id="ch003.xhtml_getting-the-brailler-project-started"
class="level2">
<h2><span class="header-section-number">2.2</span> Getting the BrailleR
Project started</h2>
<p>I used to keep my research interests separate from my blindness, but
I was regularly called upon to discuss how a blind person could study
and teach Statistics by many people within New Zealand and occasionally
from overseas. In 2009, I attended the Workshop on E-Inclusion in
Mathematics and Science (WEIMS09) where I met other people interested in
improving the success rates of blind students in the mathematical
sciences. My paper was about accessibility of statistics courses, but I
did point out the usefulness of R in preference to other tools I had
used to that point in time <span class="citation"
data-cites="Godfrey2009AccessiblePaper">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2009AccessiblePaper">2009</a>)</span>.</p>
<p>I discovered that there is room for me to take a leading role in the
development of ideas that can help other blind people learn about
statistical concepts. I have been invited to all six Summer University
events run by the organizers of the International Conference on
Computers Helping People (ICCHP), but have been unable to attend twice
due to the high cost of transporting me to Europe. I have delivered an
introductory workshop on using R at four of these events <span
class="citation"
data-cites="Godfrey2011SU-R Godfrey2013SU-R Godfrey2014SU-R Godfrey2016SU-R">(Godfrey
<a href="#ch014.xhtml#ref-Godfrey2011SU-R">2011</a>, <a
href="#ch014.xhtml#ref-Godfrey2013SU-R">2013</a><a
href="#ch014.xhtml#ref-Godfrey2013SU-R">a</a>, <a
href="#ch014.xhtml#ref-Godfrey2014SU-R">2014</a><a
href="#ch014.xhtml#ref-Godfrey2014SU-R">b</a>, and <a
href="#ch014.xhtml#ref-Godfrey2016SU-R">2016</a><a
href="#ch014.xhtml#ref-Godfrey2016SU-R">b</a>)</span>.</p>
<p>Having observed the attendees at the 2011 Summer University as they
came to grips with R, I knew there was more I could do to help them and
other blind students. I started work on the BrailleR package <span
class="citation" data-cites="Rpkg-BrailleR">(Godfrey et al. <a
href="#ch014.xhtml#ref-Rpkg-BrailleR">2018</a>)</span> in the second
half of 2011 and first proposed it could work for blind users at the
Digitisation and E-Inclusion in Mathematics and Science (DEIMS12)
workshop held in Tokyo during February 2012 <span class="citation"
data-cites="Godfrey2012BrailleRPaper">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2012BrailleRPaper">2012</a><a
href="#ch014.xhtml#ref-Godfrey2012BrailleRPaper">b</a>)</span>.</p>
<p>I wasn’t to know the value of another talk I gave at DEIMS12 for
another two years; this second talk and associated conference paper
focused on how I was using Sweave to create accessible statistical
reports for me and more beautifully formatted ones for my statistical
consulting clients. <span class="citation"
data-cites="Godfrey2012PuttingPaper">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2012PuttingPaper">2012</a><a
href="#ch014.xhtml#ref-Godfrey2012PuttingPaper">a</a>)</span>. I now
know that the groundwork I had done contributed to my desire to present
my workflow as a workshop at the 5<sup>th</sup> Summer University in
2014 <span class="citation" data-cites="Godfrey2014SU-Sweave">(Godfrey
<a href="#ch014.xhtml#ref-Godfrey2014SU-Sweave">2014</a><a
href="#ch014.xhtml#ref-Godfrey2014SU-Sweave">d</a>)</span>. It also
stood me in good stead for the work that followed on the
<code>BrailleR</code> package as it developed in late 2014 and early
2015.</p>
</section>
<section id="ch003.xhtml_the-starting-point-example" class="level2">
<h2><span class="header-section-number">2.3</span> The starting point
example</h2>
<p>The basic graph that has been used for almost every presentation of
the <code>BrailleR</code> package is a histogram. There is a more
detailed example, but the following commands create a set of numbers
that can be kept for further processing once the graph has been created.
It is the re-processing of these numbers that leads to the text
description that follows.</p>
<div id="ch003.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb1"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(BrailleR)</span></code></pre></div>
</div>
<pre><code>## The BrailleR.View,  option is set to FALSE.</code></pre>
<pre><code>## 
## Attaching package: &#39;BrailleR&#39;</code></pre>
<pre><code>## The following objects are masked from &#39;package:graphics&#39;:
## 
##     boxplot, hist</code></pre>
<pre><code>## The following object is masked from &#39;package:utils&#39;:
## 
##     history</code></pre>
<pre><code>## The following objects are masked from &#39;package:base&#39;:
## 
##     grep, gsub</code></pre>
<div id="ch003.xhtml_cb7" class="sourceCode">
<div class="sourceCode" id="cb7"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>x<span class="ot">=</span><span class="fu">rnorm</span>(<span class="dv">1000</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(<span class="fu">hist</span>(x))</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file0.png"
alt="A histogram of 1000 random values from a normal distribution" />
<p>Figure 2.1 A histogram of 1000 random values from a normal
distribution</p>
</div>
<pre><code>## This is a histogram, with the title: Histogram of x
## &quot;x&quot; is marked on the x-axis.
## Tick marks for the x-axis are at: -3, -2, -1, 0, 1, 2, and 3 
## There are a total of 1000 elements for this variable.
## Tick marks for the y-axis are at: 0, 50, 100, 150, and 200 
## It has 14 bins with equal widths, starting at -3.5 and ending at 3.5 .
## The mids and counts for the bins are:
## mid = -3.25  count = 1 
## mid = -2.75  count = 5 
## mid = -2.25  count = 10 
## mid = -1.75  count = 49 
## mid = -1.25  count = 80 
## mid = -0.75  count = 145 
## mid = -0.25  count = 193 
## mid = 0.25  count = 206 
## mid = 0.75  count = 155 
## mid = 1.25  count = 85 
## mid = 1.75  count = 52 
## mid = 2.25  count = 13 
## mid = 2.75  count = 3 
## mid = 3.25  count = 3</code></pre>
<p>This first example showed me what was possible if only I could get a
few things sorted out. All histograms are created by a function that
stores the results (both numeric and text details) and calls this stored
set of values a “histogram”. The main issue is that storing the set of
details is not consistent in R, nor is the fact that the stored object
gets given a “class” to tell me what type of object it is. This problem
haunted me for quite some time because I was talking to the wrong people
about the problem; it was time to find people that held the solution
instead of talking to the people that would benefit if a solution was
found.</p>
</section>
<section id="ch003.xhtml_why-just-plain-text" class="level2">
<h2><span class="header-section-number">2.4</span> Why just plain
text?</h2>
<p>The first initiative of <code>BrailleR</code> was to turn information
presented in a visual medium into a medium that is simple to work with,
efficient, and complementary to the skill set of as wide a group of
blind people as possible. With this in mind, a plain text solution for
gaining access to visual information was favoured above tactile images
as there is no need for any additional adaptive technology (hardware or
software) over that used for the blind person’s other work. Information
presented in text is readable in braille or heard via synthetic speech,
and is therefore only limited to the user’s skill set.</p>
<p>Other research projects are progressing the creation of tactile
images that replace the printed graphics sighted people deal with all
the time in statistical work. Tactile images do have a role to play in
educating blind people and providing them with access to information,
but their greatest drawback remains their lack of immediacy. Rendering a
graphic into a master file complete with braille labels, and then
producing this for consumption are tasks receiving much attention, but
the value for such efforts is probably greatest for situations where one
master can be used to create multiple copies for wider consumption such
as the conversion of textbooks into braille. Some preliminary
investigations into the ability to create tactile image versions of
graphs created in R have been made as part of the wider BrailleR
Project.</p>
<p>Under a sighted paradigm, many graphs in statistical work are
developed for one-time use and discarded almost immediately. It may be
some time until the effectiveness of tactile image hardware and software
is ready to deliver this outcome for all blind users of R; in the
meantime, we must find ways of gaining access to the graphical
information without reliance on another person’s ability to translate
the visual medium into something more useful for us. We must also
acknowledge here that the number of blind people with their own tactile
image hardware and software is regrettably low. Even though it is
possible to directly export a graph created in R to an embosser, use of
this practice is not yet commonplace. Perhaps we can look forward to the
time when most blind people can have access to a refreshable tactile
display that can display two-dimensional images that compare with the
best that is possible in hard copy today.</p>
<p>Sonification is considered by many to be an alternative to production
of tactile images for a blind audience. Work on sonifying statistical
graphs is being considered, but is at present best described as
experimental. Several concerns must be overcome before sonification can
be claimed a truly useful method for interpretting data. There is an
assumption made frequently by correspondents with this author that lack
of vision implies a blind person has superior aural ability . This may
be true for some blind people, but it is not universally true. We must
be sure that the interpretation gained through sound is comparable to
the interpretation that a graph in visual form would convey. Proponents
of sonification often suggest that sound provides a different
interpretation to a visual display. If they are correct, then
sonification cannot be a true alternative to a visual graph. The same,
of course, can be said for the difference between the interpretation
obtained through touching tactile images. In both cases, the solution
for blind users must be that the visual representation can be converted
to a useful format when blind users need it, without the assistance of a
sighted person to check the validity of the outcome.</p>
</section>
<section
id="ch003.xhtml_exposure-of-the-brailler-package-outside-the-blind-community"
class="level2">
<h2><span class="header-section-number">2.5</span> Exposure of the
BrailleR package outside the blind community</h2>
<p>It was obvious to me that getting the word out to the masses about
the usefulness of R for blind students and professionals was crucial. I
started to compile my notes built up from various posts made to email
groups and individuals over the years, as well as the lessons I learned
from attendance at the 2<sup>nd</sup> Summer University event. This led
to the eventual publication of my findings in <span class="citation"
data-cites="GodfreyRJournal">(Godfrey <a
href="#ch014.xhtml#ref-GodfreyRJournal">2013</a><a
href="#ch014.xhtml#ref-GodfreyRJournal">b</a>)</span>. I know that this
was a worthwhile task because it was read by teachers of blind students
who were already using R for their courses. One such person tested R and
a screen reader and managed to find a solution to a problem posed in
<span class="citation" data-cites="GodfreyRJournal">Godfrey (<a
href="#ch014.xhtml#ref-GodfreyRJournal">2013</a><a
href="#ch014.xhtml#ref-GodfreyRJournal">b</a>)</span> which led to an
addendum <span class="citation"
data-cites="GodfreyErhardtRJournalAddendum">(Godfrey and Erhardt <a
href="#ch014.xhtml#ref-GodfreyErhardtRJournalAddendum">2014</a>)</span>.</p>
<p>I presented some of my work via a poster <span class="citation"
data-cites="Godfrey2013BlindnessPoster">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2013BlindnessPoster">2013</a><a
href="#ch014.xhtml#ref-Godfrey2013BlindnessPoster">c</a>)</span> at the
NZ Statistical Association conference in Hamilton during November 2013.
This ‘poster’ presentation was developed as a multimedia presentation so
that the audience could observe video footage, handle tactile images and
be able to talk with me about the BrailleR Project. The plan to get
talking with people instead of talking at them worked and I started a
really useful collaboration with Paul Murrell from the University of
Auckland. His major contributions didn’t feature in the BrailleR package
for some time, but we’re making some really nice progress. Paul is an
expert in graphics, especially their creation and manipulation in R. Our
discussions about graphics has yielded a few titbits for my own work
that have been tested for the package. We’ve been working on how to make
scalable vector graphics that can be augmented to offer blind users
greater interactivity and therefore hopefully greater understanding
<span class="citation"
data-cites="GodfreyMurrell2016TactileGraphsPaper">(see Godfrey and
Murrell <a
href="#ch014.xhtml#ref-GodfreyMurrell2016TactileGraphsPaper">2016</a>)</span>.</p>
</section>
<section id="ch003.xhtml_reviewing-statistical-software" class="level2">
<h2><span class="header-section-number">2.6</span> Reviewing statistical
software</h2>
<p>I have been asked about the use of R in preference to other
statistical software by many blind students, their support staff, and
their teachers. Eventually I joined forces with the only other blind
person to gain employment as a lecturer of statistics (Theodor Loots,
University of Pretoria) to compare the most commonly used statistical
software for its accessibility <span class="citation"
data-cites="GodfreyLoots2014JSS">(Godfrey and Loots <a
href="#ch014.xhtml#ref-GodfreyLoots2014JSS">2014</a>)</span>. I
summarised this paper at the 5<sup>th</sup> Summer University event
<span class="citation" data-cites="Godfrey2014SU-StatsSoft">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2014SU-StatsSoft">2014</a><a
href="#ch014.xhtml#ref-Godfrey2014SU-StatsSoft">a</a>)</span>, and
offered a similar presentation at the 6<sup>th</sup> Summer University
event <span class="citation"
data-cites="Godfrey2016SU-StatsSoft">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2016SU-StatsSoft">2016</a><a
href="#ch014.xhtml#ref-Godfrey2016SU-StatsSoft">a</a>)</span> with a few
updates. It is important to keep abreast of developments, because the
statistical software changes, and so does the screen reading software
that gives us access to the mainstream statistical software.</p>
</section>
<section id="ch003.xhtml_attendance-at-user-conferences" class="level2">
<h2><span class="header-section-number">2.7</span> Attendance at UseR
conferences</h2>
<p>On my way to the 5<sup>th</sup> Summer University event, I managed to
attend the principal conference for R users (UseR!2014) in Los Angeles
where I presented my findings <span class="citation"
data-cites="Godfrey2014BlindUseROral">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2014BlindUseROral">2014</a><a
href="#ch014.xhtml#ref-Godfrey2014BlindUseROral">c</a>)</span>. Perhaps
the most valuable outcome of this conference was the ability to attend a
tutorial on use of the <code>knitr</code> package <span class="citation"
data-cites="Rpkg-knitr">(Xie <a
href="#ch014.xhtml#ref-Rpkg-knitr">2018</a>)</span> and then talk to its
author, Yihui Xie. I’d already seen the <code>knitr</code> package
before attending UseR!2014 and implemented it for some of my teaching
material by updating the Sweave documents already in use.<br />
The real value came in realising what I could probably do if I used R
markdown to do a few things I had found very hard using the Sweave way
of working. More specifically, generating an R markdown file (Rmd) from
an R script was much easier than generating a Sweave file (Rnw). Writing
the convenience functions for the <code>BrailleR</code> package started
to look very achievable at this point, and so work began. I dug out some
old work that wasn’t fit for sharing and converted it to the markdown
way of working. There has been sufficient progress in the BrailleR
Project that I presented it at UseR!2015 <span class="citation"
data-cites="Godfrey2015BaseRWeepsOral">(Godfrey <a
href="#ch014.xhtml#ref-Godfrey2015BaseRWeepsOral">2015</a>)</span>. In
2016, I presented my findings on writing (and therefore reading) R
markdown documents for (and by) blind users <span class="citation"
data-cites="GodfreyBilton2016UseROral">(Godfrey and Bilton <a
href="#ch014.xhtml#ref-GodfreyBilton2016UseROral">2016</a>)</span>.</p>
</section>
<section id="ch003.xhtml_the-ongoing-work" class="level2">
<h2><span class="header-section-number">2.8</span> The ongoing work</h2>
<p>The introduction of R markdown to the BrailleR package made a huge
difference. I’ve been able to write enough example code that once I
found a friendly postgraduate student (Timothy Bilton) to put some time
into it, we’ve managed to add more convenience functionality. Timothy
improved some of my earlier work and tried a few things of his own. This
left me with the time to add increased functionality for helping blind
users get into markdown for themselves.</p>
<p>One of my irritations of working with markdown is that everyone else
seems to write markdown and check their findings using RStudio <span
class="citation" data-cites="RStudio">(RStudio <a
href="#ch014.xhtml#ref-RStudio">2018</a>)</span>, which remains
inaccessible for me and other screen reader users. I took an old
experiment where I wrote an accessible text editor in wxPython, and with
the help of a postgraduate student from Computer Science (James Curtis)
we’ve modified it to process Rmd files. The <code>WriteR</code>
application is now beyond experimental but there is still more to do on
making it truly useful <span class="citation"
data-cites="GodfreyCurtis2016WriteRPaper">(Godfrey and Curtis <a
href="#ch014.xhtml#ref-GodfreyCurtis2016WriteRPaper">2016</a>)</span>.
In 2018, I received a great deal of assistance from Marshall Flax who
was able to help develop <code>WriteR</code> into a tool that could be
very useful to blind people wishing to write and process R markdown
files.</p>
</section>
<section id="ch003.xhtml_acknowledgements" class="level2">
<h2><span class="header-section-number">2.9</span> Acknowledgements</h2>
<p>Contributions to the BrailleR Project are welcome from anyone who has
an interest. I will acknowledge assistance in chronological order of the
contributions I have received thus far.</p>
<p>Greg Snow was the first person to assist when he gave me copies of
the original R code and help files for the R2txt functions that were
part of his <code>TeachingDemos</code> package <span class="citation"
data-cites="Rpkg-TeachingDemos">(Snow <a
href="#ch014.xhtml#ref-Rpkg-TeachingDemos">2016</a>)</span>.</p>
<p>The Lions clubs of Karlsruhe supported my attendance at the
3<sup>rd</sup> Summer University event in 2013. This gave me the first
opportunity to put the package in front of an audience that I hope will
gain from the package’s existence.</p>
<p>I’ve already mentioned the following contributors above:Paul Murrell,
Yihui Xie, Timothy Bilton, James Curtis, and Marshall Flax.</p>
<p>I also need to acknowledge the value of attending the Summer
University events. I gain so much from my interactions with the students
who attend, the other workshop leaders who give me feedback, and the
other professionals who assist blind students in their own
countries.</p>
</section>
<section id="ch003.xhtml_references-1" class="level2">
<h2><span class="header-section-number">2.10</span> References</h2>
<!--chapter:end:02-History.Rmd-->
</section>
</section>
<p><span id="ch004.xhtml"></span></p>
<section id="ch004.xhtml_GettingStarted" class="level1">
<h1><span class="header-section-number">3</span> Getting started with
BrailleR</h1>
<p>The BrailleR package has been created for the benefit of blind people
wishing to get more out of R than it already offers — which is actually
quite a lot!</p>
<section id="ch004.xhtml_accessibility-of-statistical-software"
class="level2">
<h2><span class="header-section-number">3.1</span> Accessibility of
statistical software</h2>
<p>A description of what makes statistical software accessible to the
blind was given by <span class="citation"
data-cites="GodfreyLoots2014JSS">(Godfrey and Loots <a
href="#ch014.xhtml#ref-GodfreyLoots2014JSS">2014</a>)</span>. Many of
the problems blind people face are a consequence of the failure of the
specialist screen reading software we use to interact with graphical
user interfaces. Many software applications are making use of graphics
when once the information would be presented in text form with an
accompanying graph. — SPSS <span class="citation"
data-cites="SPSS-Soft">(Inc. <a
href="#ch014.xhtml#ref-SPSS-Soft">2012</a>)</span> is an example of
this, and to a lesser extent so is the standard edition of Minitab <span
class="citation" data-cites="Minitab-Soft">(Minitab Inc. <a
href="#ch014.xhtml#ref-Minitab-Soft">2012</a>)</span>. The output from
Minitab Express <span class="citation"
data-cites="Minitab-Express">(Minitab Inc. <a
href="#ch014.xhtml#ref-Minitab-Express">2014</a>)</span> is a prime
example of the worst possible presentation of information that was
originally text; this product generates graphics that include text which
is not readable by a blind person for all of its statistical output. The
speech output software used by blind people can only interpret
information that is text. As a guide, if the individual text in a window
cannot be highlighted using the keyboard and not the mouse, then it is
likely that this text will not be read for the blind user.</p>
<p>It is true that some add-on packages for R also generate unreadable
output, but as illustrated below, this is less of an issue than for
software like SPSS or Minitab. <span class="citation"
data-cites="GodfreyLoots2014JSS">(Godfrey and Loots <a
href="#ch014.xhtml#ref-GodfreyLoots2014JSS">2014</a>)</span> gave more
detailed scrutiny of R, SAS <span class="citation"
data-cites="SAS-Soft">(SAS Institute Inc. <a
href="#ch014.xhtml#ref-SAS-Soft">2010</a>)</span> , SPSS, and Minitab.
Of these four applications, R and SAS were clearly superior to SPSS and
the standard edition of Minitab.</p>
<p>Some software applications have retained their historical links to
the days when graphs and tables were rendered in well controlled
monospace fonts — Minitab for example. In such applications the user may
still be able to produce an ASCII graphic instead of the more commonly
used high resolution graphs expected of today’s software (and user). In
contrast, SAS and SPSS can use HTML to present information in
well-formatted tables. These output windows are preferred by blind users
over the graph window displays but sometimes the amount of information
is not easily understood. Presentation of output is often read by eye in
a vertical direction, while speech output software will read line by
line. Take for example, a multiple regression where the sighted reader
may scan down the list of <span
class="math inline"><em>p</em></span>~values in the right hand column;
the same information being read aloud in line by line style could prove
quite difficult to interpret. Blind users can use combinations of keys
to move around HTML tables to speed up this process and avoid reading
the intervening columns of output. While SPSS and SAS can deliver
formatted HTML as a matter of course, R users must resort to the add-on
packages, many of which are available on CRAN.</p>
</section>
<section id="ch004.xhtml_accessibility-of-r" class="level2">
<h2><span class="header-section-number">3.2</span> Accessibility of
R</h2>
<p><span class="citation" data-cites="GodfreyRJournal">(Godfrey <a
href="#ch014.xhtml#ref-GodfreyRJournal">2013</a><a
href="#ch014.xhtml#ref-GodfreyRJournal">b</a>)</span> documented the
ability to use R almost immediately after installation; only one minor
change is recommended and can be achieved in less than a minute even
when explained via email or a telephone call. For users of the Windows
operating system, up until Windows XP, I always recommended running R in
a terminal window instead of the GUI; the shortcut placed on the Windows
desktop would then need to be pointed to <code>Rterm.exe</code> instead
of <code>Rgui.exe</code>. Macintosh and Linux users are operational with
no special actions required. Users of Windows Vista or Windows 7 did
have an additional challenge of what appeared to be the screen locking
up, or more exactly, the screen reader software “losing focus” in the R
terminal window. The solution for this problem, as documented in <span
class="citation" data-cites="GodfreyErhardtRJournalAddendum">(Godfrey
and Erhardt <a
href="#ch014.xhtml#ref-GodfreyErhardtRJournalAddendum">2014</a>)</span>,
was to hit the <code>Alt</code> key. Blind users now need to compare the
combinations of screen reader and the terminal versus the GUI. The
decision should be made by the individual user after some
experimentation; their decision may depend on the skill level they have
with their prefered screen reader and should be revisited at a later
date.</p>
<p>Blind students attending the <a
href="http://icchp-su.net/?q=node/108">R workshop at the 2011 Summer
University,</a> held in the Czech Republic, were able to set up R for
use in a classroom setting on their own machines. This included a
variety of operating systems and adaptive technology (hardware and
software for blind people). Similar events were held in 2013 and 2014
but most attendees used computers supplied by the host organizing
committees. Many attendees have made contact when issues have arisen,
but none of the issues relate to the installation of R or its
interactions with the particular hardware or software being used. I am
confident that anyone intending to undertake use of any statistical
software will be able to get R working with their screen reader.</p>
</section>
<section id="ch004.xhtml_installing-the-brailler-package"
class="level2">
<h2><span class="header-section-number">3.3</span> Installing the
BrailleR package</h2>
<p>To use the functionality of the BrailleR package you need to have it
installed. The package has several dependencies so installation from the
CRAN repository is recommended. This would be done by issuing the
following two commands in an R session:</p>
<div id="ch004.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb9"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">chooseCRANmirror</span>(<span class="at">ind=</span><span class="dv">1</span>)</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">install.packages</span>(<span class="st">&quot;BrailleR&quot;</span>)</span></code></pre></div>
</div>
<p>Note that the first and last letters of <code>BrailleR</code> are
capitalised. This is important in R, but is also useful for screen
reading software which will then give audibly different feedback, as
compared to what a screen reader user hears from the lower case text
“brailler”.</p>
<p>If for some reason you have difficulty with the above commands, you
can install the BrailleR package using a zip file version available from
a CRAN repository or the latest version on GitHub.</p>
<p>From time to time, you should check that you are using the most
recent version of the BrailleR package. You can update all installed
packages using the commands:</p>
<div id="ch004.xhtml_cb2" class="sourceCode">
<div class="sourceCode" id="cb10"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">chooseCRANmirror</span>(<span class="at">ind=</span><span class="dv">1</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="fu">update.packages</span>(<span class="at">ask=</span><span class="cn">FALSE</span>)</span></code></pre></div>
</div>
<p>Once you’ve got the package installed, you still need to get it
running in your current R session by issuing one last command. When you
issue the first of the following lines, the package start messages will
also appear.</p>
<div id="ch004.xhtml_cb3" class="sourceCode">
<div class="sourceCode" id="cb11"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(BrailleR)</span></code></pre></div>
</div>
<p>You’re ready to go!</p>
<section id="ch004.xhtml_some-initial-setting-up-instructions"
class="level3">
<h3><span class="header-section-number">3.3.1</span> Some initial
setting up instructions</h3>
<p>When you first use the <code>library(BrailleR)</code> command, you
will see some start up messages and a question. The rules of R packages
include not writing to the user’s hard drive without expressly asking
them for permission to do so. If you do not want a folder for your
<code>BrailleR</code> files then use the temporary folder which will be
removed when you end your R session. This will mean you need to answer
the question over the location of the <code>MyBrailleR</code> folder
next time you issue the <code>library(BrailleR)</code> command
though.</p>
<p>The welcome message from <code>BrailleR</code> suggests you issue the
<code>GetGoing()</code> command. This will ask you a few questions that
will help personalise your use of the <code>BrailleR</code> package. We
will see how to alter these settings in Chapter <a
href="#ch004.xhtml_Personalising">8</a> later so don’t panic if you
don’t do it all right the first time. You can re-issue the
<code>GetGoing()</code> command again at any time.</p>
<p>The book you are reading now can be reached from your R session by
issuing the command <code>BrailleRInAction()</code>. That might seem a
bit much, but do remember you can use tab completion to avoid typing the
whole command name out in full. You will probably need no more than
<code>B</code>, <code>r</code>, <code>a</code>, then tab (which adds the
rest of BrailleR), then <code>I</code> and one last tab; add the opening
and closing parentheses and press the Enter key. This will open the
front page of the book in your browser. A similar command,
<code>BrailleRHome()</code>, will open the BrailleR Project home page.
You will need to be careful with upper versus lower case when entering
commands. Note that there are often capitalised letters in the middle of
<code>BrailleR</code> commands. This is known as “camel case” and it
works well for screen reader users.</p>
<p>It is all too easy to feel you’re doing it on your own, which even
the most accomplished people have experienced. I put the
<code>ThankYou()</code> command in the BrailleR package so that it would
be easy to send me a message to tell me about your experiences as a
blind person using R or to ask for help; it starts an email message to
me. I’m not the only blind person out there using R, and many of us are
on an email list so that we can share ideas and solutions for problems,
many of which are specific to blind users. The
<code>JoinBlindRUG()</code> command will start the email needed to join
the BlindRUG email list.</p>
</section>
</section>
<section id="ch004.xhtml_what-else-do-you-need" class="level2">
<h2><span class="header-section-number">3.4</span> What else do you
need?</h2>
<p>You obviously have R installed or an intention to do so soon if you
are reading this document. Aside from R and the add-on packages that
BrailleR needs, there are no other software requirements. There are
several optional software installations that could make life easier if
they are installed before you need them. In order of necessity, they
are:</p>
<section id="ch004.xhtml_the-document-converter-pandoc" class="level3">
<h3><span class="header-section-number">3.4.1</span> The document
converter — pandoc</h3>
<p>BrailleR requires the very useful file converter called pandoc. Get
it from the <a href="https://github.com/jgm/pandoc/releases">pandoc
download page</a></p>
</section>
<section
id="ch004.xhtml_the-principal-integrated-development-environment-rstudio"
class="level3">
<h3><span class="header-section-number">3.4.2</span> The principal
integrated development environment — RStudio</h3>
<p>It is a good idea to install RStudio, even if you can’t actually use
it as a blind person using screen reading software. The reason is that
RStudio installs a few other useful tools that we will make use of by
other means. Get it from the <a
href="https://www.rstudio.com/products/rstudio/download2">RStudio
download page</a></p>
</section>
<section id="ch004.xhtml_one-programming-language-python"
class="level3">
<h3><span class="header-section-number">3.4.3</span> One programming
language — Python</h3>
<p>WriteR is a simple text editor written in wxPython that needs Python
and wxPython. Unfortunately, they require separate downloads. You do not
need this editor so do not install Python unless you are really keen.
Windows users can obtain an executable file by issuing
<code>GetWriteR()</code> once the BrailleR package has been successfully
installed. More on this in Chapter <a
href="#ch004.xhtml_WriteR">10</a>.</p>
</section>
</section>
<section id="ch004.xhtml_brailler-commands-used-in-this-chapter"
class="level2">
<h2><span class="header-section-number">3.5</span> BrailleR commands
used in this chapter</h2>
<p>The only BrailleR command actually recommended in this chapter was
<code>GetGoing()</code>. You might find it useful to use
<code>BrailleRHome()</code> and <code>BrailleRInAction()</code> from
time to time, but you’re already reading the book that the second of
these commands opens.</p>
<p>The <code>ThankYou()</code> and <code>JoinBlindRUG()</code> commands
should be used when you want to connect with me, or other blind R
users.</p>
<p>At this stage it is recommended that you install any additional
software manually when it is required.</p>
</section>
<section id="ch004.xhtml_references-2" class="level2">
<h2><span class="header-section-number">3.6</span> References</h2>
<!--chapter:end:03-GettingStarted.Rmd-->
</section>
</section>
<p><span id="ch005.xhtml"></span></p>
<section id="ch005.xhtml_VI" class="level1">
<h1><span class="header-section-number">4</span> Some basic
examples</h1>
<p>This chapter presents some examples of text output generated by the
<code>VI()</code> command of the <code>BrailleR</code> package. These
examples generate output that is displayed in the R session just like
any output from standard R commands. Please note however that not all
<code>VI()</code> commands behave in this fashion; some more advanced
uses of <code>VI()</code> are discussed in a later chapter.</p>
<p>You will need the <code>BrailleR</code> package to be ready for use
to follow along with the examples in this chapter. Do this by issuing
the command <code>library(BrailleR)</code> now.</p>
<section
id="ch005.xhtml_accessibility-of-graphics-in-statistical-software"
class="level2">
<h2><span class="header-section-number">4.1</span> Accessibility of
graphics in statistical software</h2>
<p>Access to graphical representations of information from mathematical
or statistical software is quite limited, and therefore limits the blind
user’s capacity. To this author’s knowledge, no mathematical or
statistical software has the capability of directly linking to any
hardware or software solutions that make the information presented in
graphs immediately available. The scalable vector graphic (SVG) format
can be used to present a graphic with text embedded into the file for
creating access for a blind user <span class="citation"
data-cites="BulatovGardner2004SVG GardnerBulatov2010SVG">(Bulatov and
Gardner <a href="#ch014.xhtml#ref-BulatovGardner2004SVG">2004</a>;
Gardner and Bulatov <a
href="#ch014.xhtml#ref-GardnerBulatov2010SVG">2010</a>)</span>. Only a
small number of statistical software applications have the capacity to
create SVG files, but this capacity does not in itself create access
because the text that makes them accessible must be added somehow;
generally this is a manual process. The World Wide Web Consortium has a
recommendation on the use of SVGs in web content <span class="citation"
data-cites="SVGStandard">(Dengler et al. <a
href="#ch014.xhtml#ref-SVGStandard">2011</a>)</span> and a number of
add-on packages for R make use of SVG because of the opportunity to
enrich a graphic’s interactivity in webpages; see <span class="citation"
data-cites="MurrellPotter2014">(Murrell and Potter <a
href="#ch014.xhtml#ref-MurrellPotter2014">2014</a>)</span> for a more
detailed discussion of these packages and their functionality. Of
particular note is that there are different ways to create an SVG and
care must be taken if the maximum accessibility for blind users is ever
to be achieved.</p>
<p>In R, a graph can be saved as an SVG using the <code>svg()</code>
command, but this approach uses the Cairo SVG format; this has the
unfortunate outcome that text is not always preserved as a string, and
some shapes are represented by an unstructured set of straight lines
<span class="citation" data-cites="GardnerBulatov2010SVG">(Gardner and
Bulatov <a
href="#ch014.xhtml#ref-GardnerBulatov2010SVG">2010</a>)</span>.
Retention of text as strings is crucial if modifications such as
changing the font of any text to the braille font of a user’s choosing
is to be managed easily. Use of the <code>gridSVG</code> package <span
class="citation" data-cites="MurrellPotter2014">(Murrell and Potter <a
href="#ch014.xhtml#ref-MurrellPotter2014">2014</a>)</span> does lead to
creation of SVG files that do keep strings of text intact and a
hierarchy of graphical elements. These SVG files are more easily
modified to create accessibility for blind users that have the
technology to interpret them <span class="citation"
data-cites="GardnerBulatov2010SVG">(Gardner and Bulatov <a
href="#ch014.xhtml#ref-GardnerBulatov2010SVG">2010</a>)</span>.<br />
Any graph created in R using functions from the <code>graphics</code>
package will need to be converted to the <code>grid</code> package
system for generating graphics through use of the
<code>gridGraphics</code> <span class="citation"
data-cites="Murrell2015GridGraphics">(Murrell <a
href="#ch014.xhtml#ref-Murrell2015GridGraphics">2015</a>)</span> package
before they are exported in SVG format. Existence of the
<code>gridSVG</code> and <code>gridGraphics</code> packages means that
it should be possible to automate the creation and addition of the
necessary text information to the SVG so that the need for human
intervention is minimised.</p>
<p>Add-on scripts for screen reader software, such as JAWS <span
class="citation" data-cites="JAWS">(Freedom Scientific <a
href="#ch014.xhtml#ref-JAWS">2018</a>)</span>, that attempt to interpret
the graphs created by common spreadsheet software has been tried in the
past. One major problem that results from the creation of these add-on
scripts is that of maintenance; unfortunately, the add-on scripts for
screen reader software support of spreadsheet applications has not kept
pace with the developments of those applications sufficiently enough to
give blind people access to the full range of graphs. Sporadic effort
has been made at providing access to statistical software through the
creation of add-on scripts for screen readers, but little effort was
ever given to creating access to the content of graphics. It is
unfortunate that these have also not been sufficiently maintained. In
this respect the use of R or SAS currently hold an advantage over other
commonly used software (notably SPSS and Minitab) for the blind user
because no additional scripts for the screen reading software are
required. <span class="citation"
data-cites="GodfreyLoots2014JSS">(Godfrey and Loots <a
href="#ch014.xhtml#ref-GodfreyLoots2014JSS">2014</a>)</span>. R and SAS
also work well with the open source screen reader called NVDA <span
class="citation" data-cites="NVDA">(NVDA Team <a
href="#ch014.xhtml#ref-NVDA">2018</a>)</span>.</p>
<p>In conclusion, it seems that until such time as adaptive technology
for creating immediate access via tactile images is commonly available,
other solutions will continue to be relevant. In fact, even once the
immediacy issue is overcome, there will be a place for solutions such as
the <code>BrailleR</code> package as a complementary solution rather
than a substitute.</p>
<p>At each of the Summer University and Blind Science Conference events
I have shown students that they could use R to gain access to graphed
information in a manner almost unparalleled by other statistical
software — the obvious exception to this rule is S-PLUS <span
class="citation" data-cites="SPLUS-Soft">(Insightful Corp. <a
href="#ch014.xhtml#ref-SPLUS-Soft">2003</a>)</span>. This advantage
comes from the fact that the S language, on which R is built, implicitly
stores the data needed to create many graphs, and this data can be
assigned to an object for further manipulation. This is not true for
graphs created using the ubiquitous <code>plot()</code> function
however, and many other plotting functions that explicitly return a
<code>NULL</code> object. We will first look at a graph object that can
be explicitly stored.</p>
</section>
<section id="ch005.xhtml_histograms" class="level2">
<h2><span class="header-section-number">4.2</span> Histograms</h2>
<p>The first and most commonly used example demonstrating the value of
the BrailleR package to a blind user is the creation of a histogram. For
example, a sighted user wanting a histogram of 1000 randomly chosen
values from a standard normal distribution would type</p>
<div id="ch005.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb12"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>Y <span class="ot">=</span> <span class="fu">rnorm</span>(<span class="dv">1000</span>)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>HIST <span class="ot">=</span> <span class="fu">hist</span>(Y)</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file1.png"
alt="A histogram of 1000 random values from a normal distribution" />
<p>Figure 2.1 A histogram of 1000 random values from a normal
distribution</p>
</div>
<p>A simple way for blind users to access the information used to create
a graph is to ask R to print the object, using the <code>print()</code>
command.</p>
<div id="ch005.xhtml_cb2" class="sourceCode">
<div class="sourceCode" id="cb13"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span>(HIST)</span></code></pre></div>
</div>
<pre><code>$breaks
 [1] -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5
[15]  3.0

$counts
 [1]   2   1   3  24  41  88 137 199 186 135 114  41  22   7

$density
 [1] 0.004 0.002 0.006 0.048 0.082 0.176 0.274 0.398 0.372 0.270 0.228
[12] 0.082 0.044 0.014

$mids
 [1] -3.75 -3.25 -2.75 -2.25 -1.75 -1.25 -0.75 -0.25  0.25  0.75  1.25
[12]  1.75  2.25  2.75

$xname
[1] &quot;Y&quot;

$equidist
[1] TRUE

$ExtraArgs
$ExtraArgs$main
[1] &quot;Histogram of Y&quot;

$ExtraArgs$xlab
[1] &quot;Y&quot;

$ExtraArgs$ylab
[1] &quot;Frequency&quot;

$ExtraArgs$sub
[1] &quot;&quot;


$NBars
[1] 14

$par
$par$xaxp
[1] -4  3  7

$par$yaxp
[1]   0 200   4


$xTicks
[1] -4 -3 -2 -1  0  1  2  3

$yTicks
[1]   0  50 100 150 200

attr(,&quot;class&quot;)
[1] &quot;Augmented&quot; &quot;histogram&quot;</code></pre>
<p>The <code>print()</code> command can be wrapped around the
<code>hist()</code> command which avoids explicit storage of the object,
but still creates the histogram. This approach can be taken for many
graph types where the option of suppressing the graph is not available.
The <code>hist</code> command gives the user an explicit way of
generating the information a blind user may want. Similar functionality
exists using the <code>boxplot.stats()</code> command for example. Such
workhorse functionality is useful but not well-documented.</p>
<p>Given the user has stored the output from the <code>hist()</code>
function in an object, they can interpret the text to gain some idea of
what appears in the histogram. As the object is designed for
compatibility and flexibility, not all of the printed information is
relevant to the end user however so some further education or perhaps
further processing is still required.</p>
<p>This approach is workable but not elegant. On some occasions the data
structure listed is just a list of the actual data itself and is
therefore not giving blind users the same information as sighted users
get from a graph. Blind users need some sort of summarisation tool to
replace the graph, and in many instances, are unlikely to have the skill
to develop a sound statistical solution for themselves. It is also
reliant on users knowing what the various elements printed out are, and
how they link to the visual object created for the sighted world. The
initial aim of the <code>BrailleR</code> package was to take the
information created by various functions in R and create a text printout
that reduces the amount of information that needs to be processed by
blind users. In cases like that for the histogram example just
introduced, this is a fairly simple task. For other situations, some
further work needs to be done so that the textual information is a
useful summary of the graphical information without crossing over the
line of interpreting the information for the user.</p>
<p>So let’s see what <code>BrailleR</code> is going to offer a blind
user instead of the verbose printout seen above.</p>
<div id="ch005.xhtml_cb4" class="sourceCode">
<div class="sourceCode" id="cb15"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(HIST)</span></code></pre></div>
</div>
<pre><code>This is a histogram, with the title: Histogram of Y
&quot;Y&quot; is marked on the x-axis.
Tick marks for the x-axis are at: -4, -3, -2, -1, 0, 1, 2, and 3 
There are a total of 1000 elements for this variable.
Tick marks for the y-axis are at: 0, 50, 100, 150, and 200 
It has 14 bins with equal widths, starting at -4 and ending at 3 .
The mids and counts for the bins are:
mid = -3.75  count = 2 
mid = -3.25  count = 1 
mid = -2.75  count = 3 
mid = -2.25  count = 24 
mid = -1.75  count = 41 
mid = -1.25  count = 88 
mid = -0.75  count = 137 
mid = -0.25  count = 199 
mid = 0.25  count = 186 
mid = 0.75  count = 135 
mid = 1.25  count = 114 
mid = 1.75  count = 41 
mid = 2.25  count = 22 
mid = 2.75  count = 7</code></pre>
<p>The <code>VI()</code> command actually calls the
<code>VI.histogram()</code> command because we know it is a histogram
that was generated by <code>hist()</code> above.</p>
<section id="ch005.xhtml_important-features" class="level3">
<h3><span class="header-section-number">4.2.1</span> Important
features</h3>
<p>The commands used above explicitly stored the histogram. A blind user
could use <code>VI(hist(y))</code> instead to get the same outcome. In
that case, the <code>VI()</code> command would add to the impact of
issuing the <code>hist()</code> command because the graphic is still
generated for the sighted audience. The blind user can then read from
the text description so that they can interpret the information that the
histogram offers the sighted world.</p>
</section>
<section id="ch005.xhtml_warning" class="level3">
<h3><span class="header-section-number">4.2.2</span> Warning</h3>
<p>The <code>VI()</code> function is partially reliant on the use of the
<code>hist()</code> function that is included in the
<code>BrailleR</code> package. If a histogram is created using a command
that directly links to the original <code>hist()</code> command found in
the <code>graphics</code> package, then the <code>VI()</code> command’s
output will not be as useful to the blind user. This mainly affects the
presentation of the title and axis labels; it should not affect the
details of the counts etc. within the histogram itself.</p>
<p>This behaviour could arise if the histogram is sought indirectly. If
for example, a function offers (as a side effect) to create a histogram,
the author of the function may have explicitly stated use of the
<code>hist()</code> function from the <code>graphics</code> package
using <code>graphics::hist()</code> instead of <code>hist()</code>. Use
of <code>graphics::hist()</code> will bypass the
<code>BrailleR::hist()</code> function that the <code>VI()</code>
command needs. This should not create error messages, but may result in
some strange and possibly undesirable output.</p>
</section>
</section>
<section id="ch005.xhtml_basic-numerical-summaries" class="level2">
<h2><span class="header-section-number">4.3</span> Basic numerical
summaries</h2>
<p>The standard presentation of a summary of a data frame where each
variable is given its own column is difficult for a screen reader user
to read as the processing of information is done line by line. For
example:</p>
<div id="ch005.xhtml_cb6" class="sourceCode">
<div class="sourceCode" id="cb17"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="fu">summary</span>(airquality)</span></code></pre></div>
</div>
<pre><code>     Ozone           Solar.R           Wind             Temp      
 Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  
 1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  
 Median : 31.50   Median :205.0   Median : 9.700   Median :79.00  
 Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88  
 3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  
 Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  
 NA&#39;s   :37       NA&#39;s   :7                                       
     Month            Day      
 Min.   :5.000   Min.   : 1.0  
 1st Qu.:6.000   1st Qu.: 8.0  
 Median :7.000   Median :16.0  
 Mean   :6.993   Mean   :15.8  
 3rd Qu.:8.000   3rd Qu.:23.0  
 Max.   :9.000   Max.   :31.0  
                               </code></pre>
<p>The <code>VI()</code> command actually calls the
<code>VI.data.frame()</code> command. It then processes each variable
one by one so that the results are printed variable by variable instead
of summary statistic by summary statistic. For example:</p>
<div id="ch005.xhtml_cb8" class="sourceCode">
<div class="sourceCode" id="cb19"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(airquality)</span></code></pre></div>
</div>
<pre><code>The summary of each variable is
Ozone: Min. 1   1st Qu. 18   Median 31.5   Mean 42.1293103448276   3rd Qu. 63.25   Max. 168   NA&#39;s 37  
Solar.R: Min. 7   1st Qu. 115.75   Median 205   Mean 185.931506849315   3rd Qu. 258.75   Max. 334   NA&#39;s 7  
Wind: Min. 1.7   1st Qu. 7.4   Median 9.7   Mean 9.95751633986928   3rd Qu. 11.5   Max. 20.7  
Temp: Min. 56   1st Qu. 72   Median 79   Mean 77.8823529411765   3rd Qu. 85   Max. 97  
Month: Min. 5   1st Qu. 6   Median 7   Mean 6.99346405228758   3rd Qu. 8   Max. 9  
Day: Min. 1   1st Qu. 8   Median 16   Mean 15.8039215686275   3rd Qu. 23   Max. 31  </code></pre>
<section id="ch005.xhtml_important-features-1" class="level3">
<h3><span class="header-section-number">4.3.1</span> Important
features</h3>
<p>Note that in this case, the blind user could choose to present the
summary of each variable as generated by the <code>VI()</code> command,
or the output from the standard <code>summary()</code> command. There is
no difference in the information that is ultimately presented in this
case.</p>
</section>
</section>
<section id="ch005.xhtml_brailler-commands-used-in-this-chapter-1"
class="level2">
<h2><span class="header-section-number">4.4</span> BrailleR commands
used in this chapter</h2>
<p>The only explicit command from the <code>BrailleR</code> package used
in this chapter was the <code>VI()</code> command.</p>
<!--chapter:end:04a-VIInAction.Rmd-->
</section>
</section>
<p><span id="ch006.xhtml"></span></p>
<section id="ch006.xhtml_NewGraphs" class="level1">
<h1><span class="header-section-number">5</span> New BrailleR commands
for making and interpreting basic graphs</h1>
<p>This chapter introduces two types of new commands found in the
<code>BrailleR</code> package. There are several commands to help a
blind user know what is included in a graph, starting with a tool to
help “know” what is displayed in an otherwise inaccessible graphics
device window. The other commands introduced in this chapter are
substitutes for functions found in the base distribution of R. You can
jump ahead to the examples, but there is some theory needed to explain
how the <code>BrailleR</code> package does the extra work it does, and
why we need to use these substitute commands.</p>
<p>You will need the <code>BrailleR</code> package to be ready for use
to follow along with the examples in this chapter. Do this by issuing
the command <code>library(BrailleR)</code> now.</p>
<section id="ch006.xhtml_whats-in-a-graph" class="level2">
<h2><span class="header-section-number">5.1</span> What’s in a
graph?</h2>
<p>A challenge for many blind people is to understand the way a scatter
plot shows a relationship between two variables. In a theoretical sense
they can learn that a scatter plot does show a relationship, outliers
etc. but the ability to construct a scatter plot for themselves and then
interpret it in a similar way to their sighted peers is not possible
unless they have direct access to a tactile image embosser. Such access
is not immediate as embossers are not portable. Although efforts to
create tools that can be used by blind people who do not have access to
an embosser are not new <span class="citation"
data-cites="CalderEtAl2006">(Calder et al. <a
href="#ch014.xhtml#ref-CalderEtAl2006">2006</a>)</span>, more recent
developments have tended to focus on use of touch screen technologies.
To this author’s knowledge, no comprehensive solution exists to meet the
need for blind users to independently create statistical graphs with
confidence or to modify them without starting all over again.</p>
<p>Solutions for giving blind people access (in a general sense) are
often aimed at providing an exact replica of what the sighted person can
see. A statistical graph can exist on two levels: First, the exact
detail of individual elements that are plotted in the graph, and second,
the combined effect this collection of elements conveys.</p>
<p>As we look at the various graphs being produced in any analysis, we
need to think about which of these activities is being done by the
sighted world as they consume the content. If we do not understand what
the consumer is doing, we cannot hope to provide an appropriate graph
for them; to be a producer of a graph, you must also be a consumer of
it, albeit temporarily. The solutions offered to blind users by
<code>BrailleR</code> try to keep this ethos in mind.</p>
</section>
<section id="ch006.xhtml_background" class="level2">
<h2><span class="header-section-number">5.2</span> Background</h2>
<p>In Chapter <a href="#ch006.xhtml_VI">4</a>, we saw creation of a
histogram using the <code>hist()</code> command. The <code>hist()</code>
command used for many years is found in the <code>graphics</code>
package and has its own <code>plot()</code> command called
<code>plot.histogram()</code> as well. This <code>plot()</code> command
is actually a family of commands that all start
with<code>plot.*()</code> where the star is replaced by the type of
object that is being plotted. We use this <code>plot()</code> command
all the time to give us plots for different reasons. When we fit a
regression model, we need to create various plots of the residuals and
it is done using <code>plot()</code> which actually employs
<code>plot.lm()</code> in the background to do the work. The family of
commands are referred to as “methods” and the types of objects being
worked on are called “classes”. We need a little more background before
diving into the various new commands BrailleR offers.</p>
<section id="ch006.xhtml_methods-and-classes" class="level3">
<h3><span class="header-section-number">5.2.1</span> Methods and
classes</h3>
<p>Development of the <code>BrailleR</code> Package and discussion of
its opportunities is totally reliant on two of the structures used in
the S language. These are “methods” and “classes”. In brief, a set of
commands that perform a similar task on a selection of different classes
is a “method”.</p>
<p>Methods and classes are important ideas because we can write a method
function that says how we want an object with a stated class to be
processed. Methods need classes, and we wouldn’t need classes if we
didn’t hope to use methods.</p>
<p>When we create a histogram with the <code>hist()</code> command we
can store an object of class “histogram”, and when we create a
regression model using <code>lm()</code> we create an object of class
“lm”. The <code>hist()</code> command does create an object with the
class attribute set to <code>histogram</code>, but only one specific
function exists for this class, that being the
<code>plot.histogram()</code> function to plot the histogram. Sighted
users don’t need an explicit print function for a histogram, nor does
this summary graph need further summarisation.</p>
<p>Tasks that warrant a method being written for each of a variety of
classes include:</p>
<ul>
<li>we might need a function to print the object out in an easy to use
fashion. THis happens all the time, but most R users just take it for
granted that the output looks the way it does. In fact, the output is
formatted behind the scenes.</li>
<li>we may need to plot the results in a graph. A simple
<code>plot()</code> command does all sorts of different things. Novice
users just watch the magic without asking how it happens.</li>
<li>we may need to create a different kind of object that summarizes the
original object in some way. This is already done using the
<code>summary()</code> function, but that simple <code>summary()</code>
command is actually a set of functions for different classes.</li>
</ul>
<p>These are just three tasks common to objects of many classes. There
is nothing stopping any R user from writing a method to handle a variety
of classes or adding to the methods that already exist.</p>
<p>A complete method will have a base function that informs the software
that there is a family of functions written for different classes, and
that a method has been written for the default action, which is applied
if no specific method exists for a class. For example, the print method
includes specific functions: <code>print()</code>,
<code>print.default()</code>, <code>print.matrix()</code>, and many
more. If we issue the command <code>print(x)</code>, and we know that
<code>x</code> is a matrix, the <code>print()</code> method will employ
the <code>print.matrix()</code> function to display the matrix. The
example given in Chapterthat printed the results of the histogram object
used the <code>print.default()</code> function as there is no
<code>print.histogram()</code> function in existence.</p>
<p>Many R commands do lead to an object being created with a class
attribute being explicitly stated, sometimes it is more implicit, but
all too commonly no class attribute is established at all. The vast
majority of statistical models set a class for the model being stored.
There are some quite uninformative classes set as well. Assigning a
class to an object means that we can write functions that relate to all
objects of a particular class using a general approach. A class
therefore needs to be defined for a set of objects that are going to be
homogeneous in their structure.</p>
<p>Data is usually stored with a specified class attribute, such as a
time series with class “ts” for example. We will generate different
results from employing methods if we have correctly specified the data
using a class attribute. We can also modify a data object’s class, using
commands like <code>as.tx()</code> to turn a vector of numbers into a
time series if we need to do so to get the desired outcome.</p>
<p>A data.frame is itself of class “data.frame”, a matrix is of class
“matrix”, but rather confusingly, a vector is not of class “vector”.
Vectors are assigned class attributes that depend on the type of data
being stored, being “integer”, “numeric”, “logical”, “character”,
etc.</p>
<p>As previously stated, the usefulness of methods is dependent on the
use of classes being employed when objects are created. The original
<code>hist()</code> command does specify the resulting histogram to have
a class, but there is no explicit <code>print.histogram()</code> method
at this time. In addition, not all objects are given a class so the
default method must be constructed carefully. There are actually only a
few basic data structures to work with, the easiest and most common of
which is called a “list”.</p>
<p>The results of applying the <code>print()</code> command to a
histogram shown in Chapter <a href="#ch006.xhtml_VI">4</a>, couldn’t use
the non-existent <code>print.histogram()</code> function so it used the
<code>print.default()</code> method instead. The content of the object
is stored as a “list”, but note the last element of the list that states
the class of the object. Adding this extra attribute to the data object
is a minor matter that has very powerful consequences!</p>
</section>
<section id="ch006.xhtml_who-cares-about-classes-anyway" class="level3">
<h3><span class="header-section-number">5.2.2</span> Who cares about
classes anyway?</h3>
<p>It is a reasonable question to ask. BrailleR cares because the
functions written such as the <code>VI()</code> command used throughout
Chapter <a href="#ch006.xhtml_VI">4</a> is actually a family of
commands. The beginnings of the <code>BrailleR</code> Project were
formed on the idea of writing a method that would provide the summarised
text version of the graph object created. To this end, a method was
started with the functions: <code>VI()</code>,
<code>VI.default()</code>, and <code>VI.histogram()</code> in order to
demonstrate the approach. The <code>VI()</code> commands called actually
refered to the <code>VI.histogram()</code> and
<code>VI.data.frame()</code> commands to generate output that is
sensitive to the object of interest.</p>
<p>So for the <code>VI()</code> command to do the processing necessary
to extract the information that is pushed into a graphic or textual
output, we need to know what kind of object was being created. For the
examples shown in Chapter <a href="#ch006.xhtml_VI">4</a>, that was done
with the standard R commands used when creating the histogram and the
data.frame we used. Well that’s almost true. The standard
<code>hist()</code> command from the base distribution of R does assign
the class “histogram” to the stored object, but it doesn’t have all the
necessary information in it to replicate a plotted histogram. The
solution is to create a new <code>hist()</code> command in the
<code>BrailleR</code> package that does all the work of the original
function and does add the details we want to help describe the histogram
being plotted.</p>
</section>
</section>
<section id="ch006.xhtml_example-a-histogram" class="level2">
<h2><span class="header-section-number">5.3</span> Example: A
histogram</h2>
<p>One of the easiest ways to demonstrate code snippets is to include
them in the help documentation of the function. Running these examples
is then possible using the <code>example()</code> command. In this
example, we see that use of the original <code>hist()</code> from the
<code>graphics</code> package yields the same graph as the
<code>BrailleR</code> package version, but that the additional text for
such items as titles and axis labelling used in the text description are
only added by <code>BrailleR::hist()</code>. Running the command,
<code>example(hist)</code> command will give you the following:</p>
<pre><code>&gt; x = rnorm(1000)

&gt; MyHist = graphics::hist(x, xlab = &quot;random normal values&quot;, 
+     main = &quot;Example histogram (graphics package)&quot;)</code></pre>
<div class="figure">
<img src="media/file2.png" alt="testing examples" />
<p>Figure 5.1 testing examples</p>
</div>
<pre><code>&gt; MyHist
$breaks
 [1] -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0
[15]  3.5

$counts
 [1]   2   3  13  43  90 156 208 182 155  77  48  18   3   2

$density
 [1] 0.004 0.006 0.026 0.086 0.180 0.312 0.416 0.364 0.310 0.154 0.096
[12] 0.036 0.006 0.004

$mids
 [1] -3.25 -2.75 -2.25 -1.75 -1.25 -0.75 -0.25  0.25  0.75  1.25  1.75
[12]  2.25  2.75  3.25

$xname
[1] &quot;x&quot;

$equidist
[1] TRUE

attr(,&quot;class&quot;)
[1] &quot;histogram&quot;

&gt; MyHist = hist(x, xlab = &quot;random normal values&quot;, main = &quot;Example histogram (BrailleR package)&quot;)</code></pre>
<div class="figure">
<img src="media/file3.png" alt="testing examples" />
<p>Figure 5.1 testing examples</p>
</div>
<pre><code>&gt; MyHist
$breaks
 [1] -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0  1.5  2.0  2.5  3.0
[15]  3.5

$counts
 [1]   2   3  13  43  90 156 208 182 155  77  48  18   3   2

$density
 [1] 0.004 0.006 0.026 0.086 0.180 0.312 0.416 0.364 0.310 0.154 0.096
[12] 0.036 0.006 0.004

$mids
 [1] -3.25 -2.75 -2.25 -1.75 -1.25 -0.75 -0.25  0.25  0.75  1.25  1.75
[12]  2.25  2.75  3.25

$xname
[1] &quot;x&quot;

$equidist
[1] TRUE

$main
[1] &quot;Example histogram (BrailleR package)&quot;

$xlab
[1] &quot;random normal values&quot;

$ExtraArgs
$ExtraArgs$main
[1] &quot;Histogram of x&quot;

$ExtraArgs$xlab
[1] &quot;x&quot;

$ExtraArgs$ylab
[1] &quot;Frequency&quot;

$ExtraArgs$sub
[1] &quot;&quot;


$NBars
[1] 14

$par
$par$xaxp
[1] -3  3  6

$par$yaxp
[1]   0 200   4


$xTicks
[1] -3 -2 -1  0  1  2  3

$yTicks
[1]   0  50 100 150 200

attr(,&quot;class&quot;)
[1] &quot;Augmented&quot; &quot;histogram&quot;

&gt; VI(MyHist)
This is a histogram, with the title: Histogram of x
&quot;x&quot; is marked on the x-axis.
Tick marks for the x-axis are at: -3, -2, -1, 0, 1, 2, and 3 
There are a total of 1000 elements for this variable.
Tick marks for the y-axis are at: 0, 50, 100, 150, and 200 
It has 14 bins with equal widths, starting at -3.5 and ending at 3.5 .
The mids and counts for the bins are:
mid = -3.25  count = 2 
mid = -2.75  count = 3 
mid = -2.25  count = 13 
mid = -1.75  count = 43 
mid = -1.25  count = 90 
mid = -0.75  count = 156 
mid = -0.25  count = 208 
mid = 0.25  count = 182 
mid = 0.75  count = 155 
mid = 1.25  count = 77 
mid = 1.75  count = 48 
mid = 2.25  count = 18 
mid = 2.75  count = 3 
mid = 3.25  count = 2</code></pre>
<p>When you first issued the <code>library(BrailleR)</code> command,
there were several warnings printed out. One of them told you that the
<code>hist()</code> function from the <code>graphics</code> package was
masked by the <code>BrailleR</code> version. This means that when you
use <code>hist()</code>, it is the <code>BrailleR</code> version being
used.</p>
<p>the <code>BrailleR</code> package includes <code>hist()</code> and
<code>boxplot()</code> functions that pass the details of the command on
to the <code>graphics</code> package functions of the same name, and
then add any additional content required that will improve the ability
to describe the visual graphic produced in text. In most cases, the
graph producing functions pass on arguments such as <code>main</code>,
<code>xlab</code>, or <code>ylab</code> (for main title and axis labels)
to the relevant plotting commands without storing these elements in the
object that is created. These elements are stored as graphical
parameters and can be recalled using <code>par()</code> commands.</p>
</section>
<section id="ch006.xhtml_scatter-plots" class="level2">
<h2><span class="header-section-number">5.4</span> Scatter plots</h2>
<p>The description of the <code>hist()</code> function given above shows
what is possible if a graph is created using a specific function. Many
types of graphs are created using the <code>plot()</code> function which
is actually a family of functions tailored to the type of object pushed
into them. In addition, the <code>plot()</code> command is used to
generate a simple scatter plot. This is slightly unfortunate in a
theoretical sense, but useful in a practical sense. The use of
<code>plot()</code> to generate a scatter plot cannot lead to a graph
that the <code>VI()</code> functionality can work with. Unlike the
<code>hist()</code> command which can be replaced by a function of the
same name in the <code>BrailleR</code> package, the solution needs to be
a new function of a new name. In addition to the new
<code>ScatterPlot()</code> function, the <code>BrailleR</code> package
has a <code>FittedLinePlot()</code> function that adds a fitted line to
the scatter plot.</p>
<p>The example given on the help page for <code>ScatterPlot()</code>
proves that the plots generated by <code>ScatterPlot()</code> and
<code>FittedLinePlot()</code> are identical to those that would normally
be created using <code>plot()</code> and the addition of the fitted line
using <code>abline()</code>. Running the command,
<code>example(ScatterPlot)</code> command will give you the
following:</p>
<pre><code>&gt; attach(airquality)

&gt; op = par(mfcol = c(3, 2))

&gt; plot(Wind, Ozone, pch = 4)</code></pre>
<pre><code>&gt; test1 = ScatterPlot(Wind, Ozone, pch = 4)</code></pre>
<pre><code>&gt; test1</code></pre>
<pre><code>&gt; plot(Wind, Ozone)</code></pre>
<pre><code>&gt; abline(coef(lm(Ozone ~ Wind)), col = 4)

&gt; test2 = FittedLinePlot(Wind, Ozone, line.col = 4)</code></pre>
<pre><code>&gt; test2</code></pre>
<div class="figure">
<img src="media/file4.png"
alt="The six graphs generated by the `example(ScatterPlot)`" />
<p>Figure 5.2 The six graphs generated by the
<code>example(ScatterPlot)</code></p>
</div>
<pre><code>&gt; par(op)

&gt; detach(airquality)

&gt; rm(test1)

&gt; rm(test2)

&gt; rm(op)</code></pre>
<section id="ch006.xhtml_whats-in-the-scatter-plot" class="level3">
<h3><span class="header-section-number">5.4.1</span> What’s in the
scatter plot?</h3>
<p>Well first we might ask what is in the graph window to be confident
that a plot was actually made. The <code>WTF()</code> command was put in
<code>BrailleR</code> to address this problem. For the record, WTF is
the acronym for “What’s this figure?” We’ll see it’s use in the next
figure. It should tell us what appears in the graph window for things
like axis lables and titles.</p>
<p>The current solution offered by the <code>BrailleR</code> package for
helping describe the points plotted in a scatter plot, is to attempt to
replicate the summarisation done by sight using a text construct. A
sighted person looking at a scatter plot might look at the trend being
displayed by a set of points, but they might as easily partition the
plot area into a grid pattern and recognize the density of points in
each region. For example,</p>
<div id="ch006.xhtml_cb11" class="sourceCode">
<div class="sourceCode" id="cb31"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="fu">attach</span>(airquality)</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="fu">plot</span>(Wind, Ozone, <span class="at">pch =</span> <span class="dv">4</span>)</span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="fu">abline</span>(<span class="at">v=</span><span class="fu">min</span>(Wind)<span class="sc">+</span><span class="fu">c</span>(<span class="fl">0.25</span>,<span class="fl">0.5</span>,<span class="fl">0.75</span>)<span class="sc">*</span>(<span class="fu">max</span>(Wind)<span class="sc">-</span><span class="fu">min</span>(Wind)), <span class="at">col=</span><span class="dv">6</span>)</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a><span class="fu">abline</span>(<span class="at">h =</span> <span class="fu">min</span>(Ozone, <span class="at">na.rm=</span><span class="cn">TRUE</span>) <span class="sc">+</span><span class="fu">c</span>(<span class="fl">0.25</span>,<span class="fl">0.5</span>,<span class="fl">0.75</span>)<span class="sc">*</span>(<span class="fu">max</span>(Ozone, <span class="at">na.rm=</span><span class="cn">TRUE</span>)<span class="sc">-</span><span class="fu">min</span>(Ozone, <span class="at">na.rm=</span><span class="cn">TRUE</span>)), <span class="at">col=</span><span class="dv">6</span>)</span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a><span class="fu">WTF</span>()</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file5.png"
alt="Scatter plot of Ozone versus Wind with grid lines added." />
<p>Figure 5.3 Scatter plot of Ozone versus Wind with grid lines
added.</p>
</div>
<pre><code>This graph has no main title;  and o subtitle;
&quot;Wind&quot; as the x axis label;
&quot;Ozone&quot; as the y axis label;
There are 116 points marked on this graph.</code></pre>
<div id="ch006.xhtml_cb13" class="sourceCode">
<div class="sourceCode" id="cb33"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="fu">detach</span>(airquality)</span></code></pre></div>
</div>
<p>Counting the number of points falling into each cell of the graphic
and presenting the results as a table would give the reader an
impression of the density of those points. The grid lines added in this
last figure were spaced uniformly, and chosen to split the region into a
<span class="math inline">4 × 4</span> grid of sixteen cells. Refining
the number of cells and the distributional assumptions for the grid
lines should make it easier to understand the relationship between the
two variables being plotted. Note that the general picture is what is
sought, not the specific locations of every point. The number of points
for the last scatter plot are counted by the <code>WhereXY()</code>
command as follows:</p>
<div id="ch006.xhtml_cb14" class="sourceCode">
<div class="sourceCode" id="cb34"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="fu">attach</span>(airquality)</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="fu">WhereXY</span>(Wind, Ozone, <span class="at">grid =</span> <span class="fu">c</span>(<span class="dv">4</span>,<span class="dv">4</span>))</span></code></pre></div>
</div>
<pre><code>     1  2  3 4 Sum
4    2  0  0 0   2
3    7  5  0 0  12
2    9 15  6 0  30
1    1 39 27 5  72
Sum 19 59 33 5 116</code></pre>
<div id="ch006.xhtml_cb16" class="sourceCode">
<div class="sourceCode" id="cb36"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="fu">detach</span>(airquality)</span></code></pre></div>
</div>
<p>In situations where the user is confident that the marginal
distributions of either or both of the variables being plotted are
normal, the grid lines should be spaced accordingly.</p>
</section>
</section>
<section id="ch006.xhtml_brailler-commands-used-in-this-chapter-2"
class="level2">
<h2><span class="header-section-number">5.5</span> BrailleR commands
used in this chapter</h2>
<p>The BrailleR versions of the <code>hist()</code> and
<code>boxplot()</code> commands replace those found in the
<code>graphics</code> package. The BrailleR commands
<code>ScatterPlot()</code> and <code>FittedLinePlot()</code> are
specific to BrailleR and replace the functionality usually obtained
through use of <code>plot()</code> and <code>abline()</code>. The
<code>WTF()</code> command helped prove a graph has appeared in the
graph window, and <code>WhereXY()</code> has helped count the number of
points falling into subregions of the plotting area.</p>
<!--chapter:end:04b-NewGraphCommands.Rmd-->
</section>
</section>
<p><span id="ch007.xhtml"></span></p>
<section id="ch007.xhtml_WorkingBlind" class="level1">
<h1><span class="header-section-number">6</span> Ways of Working in R as
a Blind User</h1>
<p>This chapter presents some strategies to offer blind users options
for producing and saving work from an R session. They complement the
workflows used by sighted people, or replace the tools used by sighted
people that are not able to be used by a blind person.</p>
<section id="ch007.xhtml_a-little-background" class="level2">
<h2><span class="header-section-number">6.1</span> A little
background</h2>
<p>A major issue for blind users of any mathematical or statistical
software is how the work that has been done will be transferred into a
form that can be included in reports or assignments. Standard methods of
working with R are possible as a blind user, but there is one crucial
task that sighted users find very easy that is beyond the reach of the
blind user. A sighted user can highlight a section of the output window
(including commands and results) and copy the text into a document using
the mouse. This task is done easily in word processing or text documents
using keyboard commands by the blind user, but is often impractical or
impossible within many software applications. A solution has been
provided within the <code>BrailleR</code> package by adapting a tool
developed by another R user for a completely different purpose. The
<code>TeachingDemos</code> package <span class="citation"
data-cites="Rpkg-TeachingDemos">(Snow <a
href="#ch014.xhtml#ref-Rpkg-TeachingDemos">2016</a>)</span>, provided
this tool. The original purpose was to quickly retain the output from an
R session for distribution to students, and later in its development, to
create output files (in MS Word or HTML) that would log the progress
through an assignment question or project.</p>
</section>
<section id="ch007.xhtml_using-plain-text-files" class="level2">
<h2><span class="header-section-number">6.2</span> Using plain text
files</h2>
<p>The code for saving the basic text output and commands being
generated during an interactive session into a plain text file was among
the early developments of the <code>BrailleR</code> package. The
functions <code>txtStart()</code>, <code>txtStop()</code>,
<code>txtComment()</code>, and <code>txtSkip()</code> were copied (with
permission) from the <code>TeachingDemos</code> package; in addition, a
<code>txtOut()</code> function that simplifies use of
<code>txtStart()</code> was added to the <code>BrailleR</code>
package.</p>
</section>
<section id="ch007.xhtml_use-of-r-markdown" class="level2">
<h2><span class="header-section-number">6.3</span> Use of R
markdown</h2>
<p>The general uptake of reproducible research ideas by many in the R
community has vastly improved the opportunities for novice R users to
create well-formatted HTML documents from markdown documents. This
change in the general mindset has huge benefits for a blind user. An R
markdown file is just plain text and is therefore accessible. Even more
impressive, is that the HTML documents that result from these files are
also very accessible to a blind reader.</p>
</section>
<section id="ch007.xhtml_running-jobs-offline" class="level2">
<h2><span class="header-section-number">6.4</span> Running jobs
offline</h2>
<p>Blind users will benefit from switching to batch processing commands
using <code>R CMD BATCH</code> at the command line, using the
reproducible research functionality offered by the <code>knitr</code>
package, or both strategies. Functions to help users (working under
Windows operating systems) move to these ways of working have been
included in the <code>BrailleR</code> package. In particular, a Windows
user can use the <code>MakeBatch()</code> function to create a batch
file in the current working directory, which creates the single command
line that would be called to process a specified R script or R markdown
file appropriately. The <code>BrailleR</code> package also shows a user
how a test file would be processed using these batch files. Conversion
of an R script or the history of the current workspace to an R markdown
file are implemented using the <code>R2Rmd()</code> and
<code>History2Rmd()</code> functions respectively. This suite of
functions should assist the blind user migrate to the more efficient
methods of working and ultimately become more proficient and efficient
than their peers who are not yet making use of the reproducible research
type of workflow.</p>
<!--chapter:end:04cWaysOfWorking.Rmd-->
</section>
</section>
<p><span id="ch008.xhtml"></span></p>
<section id="ch008.xhtml_RMarkdown" class="level1">
<h1><span class="header-section-number">7</span> Use of R markdown to
generate an analysis efficiently</h1>
<p>In a general sense, R markdown has been used to create reports and
package vignettes because it creates an analysis that is reproducible.
The <code>BrailleR</code> package started to use R markdown in late 2014
as a method for generating simple analyses that might be needed by
students taking introductory statistics courses. Since that time, the
prevalence of R markdown as a teaching tool in these courses has
increased. The functions described below are therefore also generating
example R markdown files to help learn how to use R markdown.</p>
<p>You will need the <code>BrailleR</code> package to be ready for use
to follow along with the examples in this chapter. Do this by issuing
the command <code>library(BrailleR)</code> now.</p>
<section id="ch008.xhtml_general-information" class="level2">
<h2><span class="header-section-number">7.1</span> General
information</h2>
<p>Each command described in this chapter and other similar commands
draft a new R markdown file and then compile it to an HTML file that is
easily read by a screen reader user.</p>
<p>This HTML file is opened automatically if R is being used
interactively, giving the blind user immediate access to the
information. The content is presented using sufficiently marked up HTML
code including headings and tables so that the blind user can make best
use of their screen reading software. All graphs are given an “alt tag”
when they are included in the HTML file, and can be presented using a
text description available from the <code>VI()</code> functionality of
the <code>BrailleR</code> package.</p>
<p>In addition, the blind user may need one or more of the graphs in a
variety of formats (png, pdf, eps, or svg), nicely formatted tables for
insertion into documents (LaTeX or HTML), and access to the code that
generated these graphs and tables (an R script). This is handled using
add-on packages wherever possible so that blind users are completing
tasks using the same tools as their sighted peers. For example, nicely
tabulated results can be saved as individual text files for later
inclusion in LaTeX documents uisng the <code>xtable</code> package <span
class="citation" data-cites="Rpkg-xtable">(Dahl <a
href="#ch014.xhtml#ref-Rpkg-xtable">2016</a>)</span>.</p>
<p>The commands shown in this chapter make use of R markdown, but they
are not actually ready for direct use within other R markdown documents.
If you wish to get the output you observe within the HTML documents that
will be generated, you will need to extract the relevant parts of the R
markdown script files that the commands create. That sounds harder than
it is!</p>
</section>
<section id="ch008.xhtml_replacing-the-graphic-user-interface-gui"
class="level2">
<h2><span class="header-section-number">7.2</span> Replacing the Graphic
User Interface (GUI)</h2>
<p>One major criticism of R often heard from novice users is that a
graphic user interface (GUI) is much easier to use than the command line
mode of operation. Blind users are no different in this respect, but as
has been reported previously <span class="citation"
data-cites="GodfreyRJournal">(Godfrey <a
href="#ch014.xhtml#ref-GodfreyRJournal">2013</a><a
href="#ch014.xhtml#ref-GodfreyRJournal">b</a>)</span>, none of the
GUI-based front ends for R are accessible to the blind user. When
considering the benefits of using a GUI mode of operation, we turn to
the justification used for the creation of some of these interfaces;
redacting all references to the GUI helps emphasize the reasons for
their existence:</p>
<ul>
<li>R Commander aims “to support … the statistical functionality
required for a basic-statistics course; to make it relatively difficult
to do unreasonable things; and to render visible the relationship
between choices made …<br />
and the R commands that they generate.” <span class="citation"
data-cites="Fox2005-RCommander">(Fox <a
href="#ch014.xhtml#ref-Fox2005-RCommander">2005</a>)</span>.</li>
<li>“Because R analyses must be called as text commands, the user is
required to find out the name of the function that will accomplish their
task, and then remember that name along with the names of the variables
to feed it, and its argument options. Perhaps more fundamentally, many
users have never dealt with a program that requires them to type in
commands that manipulate objects in the program. For beginners, Deducer
is designed to be an intuitive dialog based interface to common data
manipulation and analysis tasks.” <span class="citation"
data-cites="Fellows2012Deducer">(Fellows <a
href="#ch014.xhtml#ref-Fellows2012Deducer">2012</a>)</span></li>
<li>“The scope of RKWard is deliberately broad, targeting both R novices
and experts. For the first group, the aim is to allow any person with
knowledge on statistical procedures to start using RKWard for their
everyday work without having to learn anything about the R programming
language, at least initially. At the same time, RKWard tries to support
users who want to learn and exploit the full flexibility of the R
language for automating or customizing an analysis.” <span
class="citation" data-cites="RoedigerEtAl2012RKWard">(Rödiger et al. <a
href="#ch014.xhtml#ref-RoedigerEtAl2012RKWard">2012</a>)</span></li>
<li>RKWard “avoids wrapping complex sequences of data manipulation or
analysis into custom highlevel R functions. The task of providing
high-level functions is logically independent of the development of the
GUI frontend, and should best be addressed in dedicated R packages,
where necessary.” <span class="citation"
data-cites="RoedigerEtAl2012RKWard">(Rödiger et al. <a
href="#ch014.xhtml#ref-RoedigerEtAl2012RKWard">2012</a>)</span></li>
</ul>
<p>Making any of these GUI tools accessible is difficult because they
were not developed using interface development toolkits that
automatically build accessibility into the interface. Creation of a GUI
such as R Commander is not a small undertaking. Retrospectively building
in the necessary accessibility features would be a massive undertaking
that the blind community could not reasonably expect of a very small
development team. Duplicating the work done to create such a GUI tool
from scratch using a development toolkit that helps build in the
necessary elements for accessibility and then maintaining it as
operating systems develop over time is not a practical solution either.
It may be possible to improve the toolkits that are used to create the
GUI options like R Commander or Deducer so that their development is not
hindered while their accessibility becomes automatic; unfortunately,
this requires knowledge well beyond my skill set.</p>
<p>If blind users cannot make use of any of the GUI tools and we don’t
have the necessary skills to develop such a tool that does work for
ourselves, what solutions exist for us? When I’ve discussed the merits
of various statistical software with other blind users, they have
questioned the use of R by saying something like, “When I use software
<em>x</em>, I can do <em>y</em> and <em>z</em>. How do I do that in R?”
With respect to SAS for example, a user can build up a set of templates
for various commonly used analyses for themselves. The same is true as
an R user, but SAS users can get the templates by using the menus in the
standard GUI, and they can keep the procedures in files for later use.
SPSS users can do this as well. (These seem to be the most commonly used
software options for blind users who communicate with me.) In either
case, the code can be reused after issuing a few find/replace searches.
It seems that even though it is more efficient to make use of this
ability to re-use code templates, that many of the blind users of these
software options prefer to use key presses to simulate mouse clicks in
order to use the menus and dialogue boxes. When questioning them on
their motives, we quickly come to the point that the use of menus and
dialogue boxes offers a degree of comfort that tasks have been done
correctly. The next crucial aspect worth mentioning is that the GUI
provides the user with more output than can be obtained from typing out
numerous commands in R. Searching for the right functions and then
ensuring the syntax of their arguments is correct limits a blind user’s
ability in any command-line software, just as it does for sighted
users.</p>
<p>The solution for a replacement of the GUI is to create convenience
functions with simple names that require entry of a minimal number of
arguments so that the user gets the maximum amount of useful
information. This information might prove more than is needed for many
users, but hopes to deliver what is needed by the widest possible range
of blind users. Like RKWard, <code>BrailleR</code> functions generate R
scripts that are somewhat verbose <span class="citation"
data-cites="RoedigerEtAl2012RKWard">(Rödiger et al. <a
href="#ch014.xhtml#ref-RoedigerEtAl2012RKWard">2012</a>)</span>.</p>
</section>
<section id="ch008.xhtml_description-of-a-single-numeric-variable"
class="level2">
<h2><span class="header-section-number">7.3</span> Description of a
single numeric variable</h2>
<p>There are many commands needed to get the numeric and graphic summary
measures that might be required to collect all relevant information on a
single numeric variable. The <code>UniDesc()</code> command has been
written as a shortcut for a blind user who wishes to obtain:</p>
<ul>
<li>the counts of points in the sample that were observed and not
observed,</li>
<li>the mean and trimmed mean,</li>
<li>the five number summary: minimum, lower quartile, median, upper
quartile, and maximum,</li>
<li>the interquartile range (IQR) and standard deviation,</li>
<li>measures of skewness and kurtosis, relying on the
<code>moments</code> package <span class="citation"
data-cites="Rpkg-moments">(Komsta and Novomestky <a
href="#ch014.xhtml#ref-Rpkg-moments">2015</a>)</span>,</li>
<li>a histogram and/or a boxplot,</li>
<li>a normality (quantile-quantile) plot,</li>
<li>various tests for normality, courtesy of the <code>nortest</code>
package <span class="citation" data-cites="Rpkg-nortest">(Gross and
Ligges <a href="#ch014.xhtml#ref-Rpkg-nortest">2015</a>)</span> ,
and</li>
<li>tests on the significance of the skewness and kurtosis, also
courtesy of the <code>moments</code> package <span class="citation"
data-cites="Rpkg-moments">(Komsta and Novomestky <a
href="#ch014.xhtml#ref-Rpkg-moments">2015</a>)</span>.</li>
</ul>
<p>The <code>UniDesc()</code> function can deliver all of this with
minimal effort from the user.</p>
<p>An example of the main output document (HTML) can be viewed by
re-issuing the commands generated by calling</p>
<div id="ch008.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb37"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="fu">example</span>(UniDesc)</span></code></pre></div>
</div>
<p>while running R interactively. This issues the following
commands.</p>
<pre><code>Ozone=airquality$Ozone
UniDesc(Ozone, View=FALSE)
rm(Ozone)
# N.B. Various files and a folder were created in the working directory. 
# Please investigate them to see how this function worked.</code></pre>
<p>There is one small change to make to get the desired outcome. The
argument <code>View=FALSE</code> stops the default action which is to
open the HTML document automatically. This avoids problems while the
BrailleR package is being created. The <code>UniDesc()</code> function
was designed for interactive use so do not include this argument if you
do want this function to open the HTML file automatically.</p>
<p>As an alternative, and if you do have a current internet connection
you can view the result of running the <a
href="https://R-Resources.massey.ac.nz/BrailleRInAction/Ozone-UniDesc.html"><code>UniDesc()</code>
command on the Ozone data</a> in your browser without having to re-enter
the example commands. You can also view the <a
href="Ozone-UniDesc.Rmd">R markdown script for Unidesc</a></p>
<p>The document header includes a code chunk that sets the options for
the <code>knit2html()</code> process used to convert this file to HTML.
This processing allows for:</p>
<ul>
<li>multiple file types for the graphs,</li>
<li>ensures a minimum of extra text in the output,</li>
<li>hides the R code from the HTML file,</li>
<li>sets the location of the saved graphs, and</li>
<li>establishes the height of the figures.</li>
</ul>
<p>The user that does not like these settings can edit the markdown file
for themselves and re-process the file, but the intention is to deliver
more than all users would want so that as many users as possible get
what they need.</p>
<p>This R markdown script uses the <code>VI()</code> method for the
graphs as well as the code that generates the HTML (via markdown) and
LaTeX tables (using the <code>xtable</code> package). Take note of the
arguments supplied to the code chunks for the graphs; these include a
<code>fig.cap</code> which is used as an Alt tag in the resulting HTML
files. The quoted string is the only text that is read aloud by a blind
person’s screen reading software as they move the cursor onto the graph
while reading through the HTML document. The methods used for creating
tables in markdown (either directly or using the <code>kable()</code>
command from the <code>knitr</code> package) both lead to a formatted
HTML table that is easily navigated by a screen reader using keystrokes
that help move between rows or columns. The result is that the HTML
document is about as user-friendly as can be expected for a blind user.
It is important to recognize that some of the text is arranged for the
optimal use by a blind person; it is possible to alter the cosmetics of
the HTML document without altering the experience for blind users. Given
a blind user might be accompanied by sighted classmates, teaching staff,
or colleagues, making the HTML pages presentable is desirable; this has
been achieved using a custom style sheet (CSS) included in the package.
This style includes some color, adequate spacing of content and other
features that improve the clarity of the presented material which is
important for a user with some residual vision that wishes to read
through the results visually rather than using screen reading
software.</p>
<p>If all of the optional arguments of the <code>UniDesc()</code>
function are set at their defaults, the HTML file is automatically
opened in a browser (courtesy of the <code>View</code> argument); it
puts the R markdown file, the R script, and the HTML document in the
current working directory, while the LaTeX and graph files are all
placed in a subdirectory.</p>
<p>Several other convenience functions have been created that follow the
same process as the <code>UniDesc()</code> function. The
<code>OneFactor()</code> function compares one continuous response
variable to a categorical variable, while <code>TwoFactors()</code>
allows for two categorical variables and their possible interaction to
help explain a single continuous response variable. These functions
create group summary statistics and suitable graphs that a sighted
audience might expect to see. Comparing a continuous response variable
to a continuous predictor variable is achieved using the
<code>OnePredictor()</code> function. Each of these functions has an
example using data from the <code>datasets</code> package so a user can
see what can be expected from these functions.</p>
</section>
<section
id="ch008.xhtml_analysis-of-a-single-continuous-variable-with-respect-to-a-single-grouping-factor"
class="level2">
<h2><span class="header-section-number">7.4</span> Analysis of a single
continuous variable with respect to a single grouping factor</h2>
<p>There are many commands needed to get the numeric and graphic summary
measures that might be required to collect all relevant information on a
single numeric variable when it might depend on a grouping factor. The
<code>OneFactor()</code> command has been written as a shortcut for a
blind user who wishes to obtain:</p>
<ul>
<li>the counts of observations within each group,</li>
<li>the mean, standard deviation and standard error for each group,</li>
<li>comparative boxplots and/or dotplots,</li>
<li>the one-way analysis of variance, and</li>
<li>Tukey’s Honestly Significant Difference (HSD) test on the
significance of the between group differences.</li>
</ul>
<p>An example of the main output document (HTML) can be viewed by
re-issuing the commands generated by calling</p>
<div id="ch008.xhtml_cb3" class="sourceCode">
<div class="sourceCode" id="cb39"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="fu">example</span>(OneFactor)</span></code></pre></div>
</div>
<p>while running R interactively. This issues the following
commands.</p>
<pre><code>data(airquality)

# the following line  returns an error:
## OneFactor(&quot;Ozone&quot;, &quot;Month&quot;, airquality, View=FALSE)
# so we make a copy of the data.frame, and fix that:

airquality2 = airquality
airquality2$Month = as.factor(airquality$Month)
# and now all is good to try:
OneFactor(&quot;Ozone&quot;, &quot;Month&quot;, airquality2)
# N.B. Various files and a folder were created in the working directory. 
# Please investigate them to see how this function worked.</code></pre>
<p>As before, there is one small change to make to get the desired
outcome. The argument <code>View=FALSE</code> which stops the HTML
document opening automatically needs to be removed.</p>
<p>As an alternative, and if you do have a current internet connection
you can view the result of running the <a
href="https://R-Resources.massey.ac.nz/BrailleRInAction/Ozone.Month-OneFactor.html"><code>OneFactor()</code>
command on the Ozone data</a> in your browser without having to re-enter
the example commands.</p>
<p>The example here demonstrates the point that the grouping variable
must be a factor. The month variable is not stored as a factor in the
airquality data so its use would have created an error.</p>
</section>
<section id="ch008.xhtml_use-of-brailler-for-linear-regression"
class="level2">
<h2><span class="header-section-number">7.5</span> Use of BrailleR for
linear regression</h2>
<p>It is common for sighted users to create a handful of graphs that
help them determine the validity of a linear model, even the most basic
simple linear regressions. The <code>VI()</code> command can be applied
to a linear model object. The specific function to do this is found in
the <code>VI.lm()</code> function, but most users do not need to
explicitly use <code>VI.lm()</code> because the call to
<code>VI()</code> will know to use the <code>VI.lm()</code> function if
it is the right one to use at the time.</p>
<p>The <code>VI.lm()</code> function generates so much text as a
substitute for the graphs used by sighted users, that it is easier to
put this text in an HTML document and have that new document opened in a
browser instead of trying to use a screen reader within the R
session.</p>
<p>Let’s see an example using the <code>airquality</code> data. A simple
linear regression model might be created and investigated using:</p>
<div id="ch008.xhtml_cb5" class="sourceCode">
<div class="sourceCode" id="cb41"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="fu">data</span>(airquality)</span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>MyModel <span class="ot">=</span> <span class="fu">lm</span>(Ozone<span class="sc">~</span>Temp, <span class="at">data=</span>airquality)</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="fu">summary</span>(MyModel)</span></code></pre></div>
</div>
<pre><code>Call:
lm(formula = Ozone ~ Temp, data = airquality)

Residuals:
    Min      1Q  Median      3Q     Max 
-40.729 -17.409  -0.587  11.306 118.271 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) -146.9955    18.2872  -8.038 9.37e-13 ***
Temp           2.4287     0.2331  10.418  &lt; 2e-16 ***
---
Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1

Residual standard error: 23.71 on 114 degrees of freedom
  (37 observations deleted due to missingness)
Multiple R-squared:  0.4877,    Adjusted R-squared:  0.4832 
F-statistic: 108.5 on 1 and 114 DF,  p-value: &lt; 2.2e-16</code></pre>
<div id="ch008.xhtml_cb7" class="sourceCode">
<div class="sourceCode" id="cb43"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="fu">par</span>(<span class="at">mfrow=</span><span class="fu">c</span>(<span class="dv">2</span>,<span class="dv">2</span>))</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="fu">plot</span>(MyModel)</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file6.png"
alt="Diagnostic plots for the simple linear regression model." />
<p>(#fig:AirQuality.lm)Diagnostic plots for the simple linear regression
model.</p>
</div>
<div id="ch008.xhtml_cb8" class="sourceCode">
<div class="sourceCode" id="cb44"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="fu">cat</span>(<span class="fu">paste</span>(<span class="st">&quot;MyModel = lm(Ozone~Temp, data=airquality, echo=FALSE)&quot;</span>,</span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;VI(MyModel)&quot;</span>, </span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">sep=</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>), <span class="at">file=</span><span class="st">&quot;RunLater.R&quot;</span>, <span class="at">append=</span><span class="cn">TRUE</span>)</span></code></pre></div>
</div>
<p>The user now has a model stored as <code>MyModel</code> in the
current workspace, has printed a summary of that model, and has plotted
a set of four diagnostic plots in a <span
class="math inline">2 × 2</span> grid. The blind user will still need to
issue those commands so that the output is created to meet the
expectations of the sighted audience, but will also find value in
issuing the two extra commands</p>
<div id="ch008.xhtml_cb9" class="sourceCode">
<div class="sourceCode" id="cb45"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(MyModel)</span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(<span class="fu">summary</span>(MyModel))</span></code></pre></div>
</div>
<p>The use of the second of these commands will generate</p>
<pre><code>The term which is significant to 1% is
Temp with an estimate of 2.428703 and P-Value of 2.931897e-18 </code></pre>
<p>which will be a much easier reading exercise for a screen reader user
than would be the standard <code>summary()</code> output given earlier.
Note that not all the information contained in the standard summary is
contained in this output.</p>
<p>The output from use of the <code>VI()</code> command on the linear
model can be viewed in your browser if you have a current internet
connection. If you do not have a connection at this time, you will need
to re-issue some of the above commands for yourself in an R session.</p>
</section>
<section
id="ch008.xhtml_analysis-of-a-single-continuous-variable-with-respect-to-another-continuous-variable"
class="level2">
<h2><span class="header-section-number">7.6</span> Analysis of a single
continuous variable with respect to another continuous variable</h2>
<p>The <code>OnePredictor()</code> command is similar to the
<code>OneFactor()</code> command describe earlier in this chapter and
makes use of the <code>VI()</code> command as applied to the simple
linear regression model fitted to a pair of continuous variables, one of
which is determined to respond to the other. The
<code>OnePredictor()</code> command has been written as a shortcut for a
blind user who wishes to obtain:</p>
<ul>
<li>the counts of observations within each group,</li>
</ul>
<p>An example of the main output document (HTML) can be viewed by
re-issuing the commands generated by calling</p>
<div id="ch008.xhtml_cb11" class="sourceCode">
<div class="sourceCode" id="cb47"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="fu">example</span>(OnePredictor)</span></code></pre></div>
</div>
<p>while running R interactively. This issues the following
commands.</p>
<pre><code>data(airquality)
OnePredictor(&quot;Ozone&quot;, &quot;Wind&quot;, airquality, View=FALSE)
# N.B. Various files and a folder were created in the working directory. 
# Please investigate them to see how this function worked.</code></pre>
<p>As before, there is one small change to make to get the desired
outcome. The argument <code>View=FALSE</code> which stops the HTML
document opening automatically needs to be removed.</p>
<p>As an alternative, and if you do have a current internet connection
you can view the result of running the <a
href="https://R-Resources.massey.ac.nz/BrailleRInAction/Ozone-OnePredictor.html"><code>OnePredictor()</code>
command on the Ozone data</a> in your browser without having to re-enter
the example commands.</p>
</section>
<section
id="ch008.xhtml_fitting-a-linear-model-and-obtaining-its-residual-analysis"
class="level2">
<h2><span class="header-section-number">7.7</span> Fitting a linear
model and obtaining its residual analysis</h2>
<p>The final demonstration for this chapter is the extremely common task
of fitting a linear model to some data. This is almost always taught
using graphical techniques, especially for the validation of the model
being fitted. Of particular note is the way an instructor would teach
sighted students about the sensibility of fitting any line to some data
which cannot be easily judged even using the <code>WhereXY()</code>
function described earlier. A blind student lacking an embosser to
produce a tactile image that shows the fitted line and the data, will
almost certainly need to fit the model and see how good or bad it is.
These blind students are therefore even more reliant on the residual
analysis than their sighted classmates</p>
<p>The example is chosen for reproducibility and its lack of statistical
validity, as this is the best way to demonstrate the function’s value to
a blind user. The code:</p>
<p>input R/VI.lm</p>
<p>always generates an R markdown file and an R script, and if
<code>BrailleR</code> default settings are being used in an interactive
session, also automatically opens the corresponding HTML file created by
the <code>knit2html()</code> function from the <code>knitr</code>
package. This HTML document is based on the results of the
<code>UniDesc()</code> function applied to the Pearson residuals for the
model and a number of other graphs and tables used to validate the
model. The included graphs are of the residuals plotted against the
fitted values, the order the data were collected (assumes data are
presented in this order), the leverages, and the preceding residual.
Each of these graphs is subjected to scrutiny using the
<code>WhereXY()</code> function as described earlier. The marginal
distribution of the residuals is assumed normal while the fitted values
and leverages are categorized on the basis of a uniform distribution.
The assumption of normality for residuals is immediately obvious, but
the choice to explicitly use an incorrect assumption of uniformity for
the other values needs to be justified. While these quantities aare
unlikely to be uniformly distributed, the intended audience needs to
know about the pattern of their presentation on the graph; this should
be easier to understand if the categorization is done using uniform
spacing rather than another distribution that is unfamiliar to the
intended audience.</p>
<p>A table of unusual observations is created that uses rules of thumb
for magnitude of residuals, leverages, and Cook’s distances. This table
is presented in the HTML document and converted to a LaTeX file using
the <code>xtable</code> package. The incorporation of this LaTeX file is
demonstrated in Table{InflObsModel1}.</p>
<p>input R/Model1.Validity/InflObs</p>
<p>Note that the automatic formatting of this table as performed by the
<code>xtable</code> package has not been altered to meet a specified
publication style. Ultimatly, users will need to alter the presentation
to meet publisher specifications for themselves.</p>
</section>
<section id="ch008.xhtml_brailler-commands-used-in-this-chapter-3"
class="level2">
<h2><span class="header-section-number">7.8</span> BrailleR commands
used in this chapter</h2>
<p>The first two <code>BrailleR</code> commands introduced in this
chapter were the <code>UniDesc()</code> and <code>OneFactor()</code>
commands; they used the <code>VI()</code> command in the R markdown
files that they create, as was described back in Chapter <a
href="#ch008.xhtml_VI">4</a>, to give the text descriptions for graphs.
We then saw a new use of the <code>VI()</code> command and several other
commands designed to generate common analyses quickly. These included
the <code>OnePredictor()</code>, etc.</p>
<!--chapter:end:05-MarkdownInAction.Rmd-->
</section>
</section>
<p><span id="ch009.xhtml"></span></p>
<section id="ch009.xhtml_Personalising" class="level1">
<h1><span class="header-section-number">8</span> Personalising
BrailleR</h1>
<section id="ch009.xhtml_general" class="level2">
<h2><span class="header-section-number">8.1</span> General</h2>
<p>Once you’ve played with a few examples, you might want to settle on
the way you want BrailleR to work for you. There are a wide range of
options needed to get the best out of the <code>BrailleR</code> package
specific to each user, and perhaps for each user who wants specific
settings to be in play for different projects. All <code>BrailleR</code>
settings are stored in a local file, and also in a global file. These
files are both called <code>BrailleROptions</code>. The global settings
file is located in a folder called <code>MyBrailleR</code> which is
located where you let <code>BrailleR</code> choose when you first loaded
the package using the <code>library(BrailleR)</code> command. You could
have let this be a temporary location so you will be asked every time
you start <code>BrailleR</code> until you let the standard location be
used.</p>
<p>The <code>BrailleROptions</code> file in the <code>MyBrailleR</code>
folder will be used unless a local version is found. This local file
will be in the working directory being used when the package is
loaded.</p>
</section>
<section id="ch009.xhtml_settings-that-are-about-you" class="level2">
<h2><span class="header-section-number">8.2</span> Settings that are
about you</h2>
<section id="ch009.xhtml_who-is-the-r-markdown-file-being-written-by"
class="level3">
<h3><span class="header-section-number">8.2.1</span> Who is the R
markdown file being written by?</h3>
<p>You might want your analyses to use your name instead of the default
name <code>BrailleR</code>. Do this using the <code>SetAuthor()</code>
function. e.g.</p>
<div id="ch009.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb49"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="fu">SetAuthor</span>(<span class="st">&quot;Jonathan Godfrey&quot;</span>)</span></code></pre></div>
</div>
<p>OK, you ought to use your name not mine, but you get the point.</p>
<p>This will have an instant impact, even on the examples for
<code>BrailleR</code> functions. Set the author and then try
<code>example(UniDesc)</code> for example.</p>
</section>
<section id="ch009.xhtml_the-use-of-the-vi-command" class="level3">
<h3><span class="header-section-number">8.2.2</span> The use of the VI()
command</h3>
<p>The <code>BrailleR</code> package was intended for use by blind
people, but we need to see more in text than do most people in our
intended audiences. You may wish to turn off or on the use of the output
generated by the <code>VI()</code> commands throughout the R markdown
files written by such commands as <code>UniDesc()</code> etc. Do this
using the functions <code>GoBlind()</code> to use the <code>VI()</code>
command, and <code>GoSighted()</code> to turn it off.</p>
<p>I think a standard workflow might be to start <code>BrailleR</code>,
do some analyses using <code>UniDesc()</code> or
<code>OnePredictor()</code> and the like, and then having worked out
what was working well, use <code>GoSighted()</code> and re-issue the
commands that you want to share with others. Don’t forget to
<code>GoBlind()</code> again though so that you can get the text
descriptions back when you need them.</p>
</section>
</section>
<section id="ch009.xhtml_settings-for-saving" class="level2">
<h2><span class="header-section-number">8.3</span> Settings for
saving</h2>
</section>
<section id="ch009.xhtml_brailler-commands-used-in-this-chapter-4"
class="level2">
<h2><span class="header-section-number">8.4</span> BrailleR commands
used in this chapter</h2>
<p><code>SetAuthor()</code>, <code>GoBlind()</code> and
<code>GoSighted()</code>,</p>
<!--chapter:end:06-Personalising.Rmd-->
</section>
</section>
<p><span id="ch010.xhtml"></span></p>
<section id="ch010.xhtml_GGPlot" class="level1">
<h1><span class="header-section-number">9</span> The ggplot world and
BrailleR</h1>
<p>The use of the ggplot style of graph production has increased
markedly since its inception. The grammar of graphics as seen in the R
code used to create the extremely wide range of graphs is seldom
human-interpretable with ease. Creation of suitable support
functionality via the <code>VI()</code> command is very definitely
required. An initial attempt to extract any useful infromation from
these graphs was contributed to the <code>BrailleR</code> package by
Tony Hirst. Significant improvement has been made by Debra Warren as
part of her postgraduate work under the supervision of Paul Murrell at
the University of Auckland. Much of what is displayed in this chapter is
only worth offering because of Debra’s work and the interactions had
between her, Paul and I in the second half of 2017.</p>
<p>N.B. the commands here are exact copies of the commands presented in
<span class="citation" data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> or some
minor alterations to them; any changes will be explicitly noted. All
plots are created using the figure numbers from <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> or the page
numbers if no figure number was given. They are then investigated using
the <code>VI()</code> command from the <code>BrailleR</code>
package.</p>
<p>You will need some additional packages to the <code>BrailleR</code>
package to be ready for use to follow along with the examples in this
chapter. Do this by issuing the commands:</p>
<div id="ch010.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb50"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(BrailleR)   </span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(ggplot2)   </span></code></pre></div>
</div>
<pre><code>Attaching package: &#39;ggplot2&#39;</code></pre>
<pre><code>The following objects are masked from &#39;package:BrailleR&#39;:

    xlab, ylab</code></pre>
<div id="ch010.xhtml_cb4" class="sourceCode">
<div class="sourceCode" id="cb53"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="fu">library</span>(magrittr)</span></code></pre></div>
</div>
<p>Note that one data set used for these examples is created by <span
class="citation" data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> while the
others are included in the <code>ggplot2</code> package.</p>
<div id="ch010.xhtml_cb5" class="sourceCode">
<div class="sourceCode" id="cb54"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true" tabindex="-1"></a><span class="fu">set.seed</span>(<span class="dv">1410</span>)</span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true" tabindex="-1"></a>dsmall <span class="ot">&lt;-</span> diamonds[<span class="fu">sample</span>(<span class="fu">nrow</span>(diamonds), <span class="dv">100</span>),]   </span></code></pre></div>
</div>
<p>One important note for the graphs in this chapter is the difference
in the way they appear here, as compared to the original figures of
<span class="citation" data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> where
differing height and width parameters have been set for each graph. For
example, in the following graph, the points are smaller than in the
original figure, and the aspect ratio is slightly different. The
consequence is that this graph looks less cluttered than does the
original.</p>
<div id="ch010.xhtml_cb6" class="sourceCode">
<div class="sourceCode" id="cb55"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true" tabindex="-1"></a>p11a <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> diamonds)   </span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true" tabindex="-1"></a>p11a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file7.png"
alt="First graph on page 11 of @Wickham2009ggplot2" />
<p>Figure 9.1 First graph on page 11 of <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span></p>
</div>
<div id="ch010.xhtml_cb7" class="sourceCode">
<div class="sourceCode" id="cb56"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true" tabindex="-1"></a><span class="fu">VI</span>(p11a)  </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;price&#39; with labels 0, 5000, 10000 and 15000.
The chart is a set of 53940 points.</code></pre>
<p>Note that unlike some other ways the <code>VI()</code> command has
worked, the graph was not created by the nesting of the call to render
the graph when nested inside the <code>VI()</code> command. In all the
examples that follow, I use the pipe <code>%&gt;%</code> operator from
the <code>magrittr</code> package to push the graph into the
<code>VI()</code> function.</p>
<div id="ch010.xhtml_cb9" class="sourceCode">
<div class="sourceCode" id="cb58"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>a <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> dsmall, <span class="at">colour =</span> color)</span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0.5, 1.0, 1.5, 2.0 and 2.5.
It has y-axis &#39;price&#39; with labels 0, 5000, 10000 and 15000.
There is a legend indicating that colour is used to represent color, with 7 levels:
D represented by colour very deep purple, 
E represented by colour vivid purplish blue, 
F represented by colour moderate blue, 
G represented by colour vivid bluish green, 
H represented by colour brilliant green, 
I represented by colour vivid yellow green and 
J represented by colour vivid greenish yellow.
The chart is a set of 100 points.</code></pre>
<div id="ch010.xhtml_cb11" class="sourceCode">
<div class="sourceCode" id="cb60"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file8.png"
alt="Left pane of Figure 2.2 of @Wickham2009ggplot2" />
<p>Figure 9.2 Left pane of Figure 2.2 of <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span></p>
</div>
<p>We haven’t been able to tell what exact colour was used in the <span
class="citation" data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> rendering of
this graph, but there has obviously been some minor alteration of the
colour palette being used by the <code>ggplot2</code> package.</p>
<div id="ch010.xhtml_cb12" class="sourceCode">
<div class="sourceCode" id="cb61"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>b <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> dsmall, <span class="at">shape =</span> cut)    </span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>Warning: Using shapes for an ordinal variable is not advised</code></pre>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0.5, 1.0, 1.5, 2.0 and 2.5.
It has y-axis &#39;price&#39; with labels 0, 5000, 10000 and 15000.
There is a legend indicating that shape is used to represent cut, with 5 levels:
Fair represented by shape solid circle, 
Good represented by shape solid triangle, 
Very Good represented by shape solid square, 
Premium represented by shape plus and 
Ideal represented by shape boxed X.
The chart is a set of 100 points.</code></pre>
<div id="ch010.xhtml_cb15" class="sourceCode">
<div class="sourceCode" id="cb64"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.2</span>b</span></code></pre></div>
</div>
<pre><code>Warning: Using shapes for an ordinal variable is not advised</code></pre>
<div class="figure">
<img src="media/file9.png" alt="Right pane of Figure 2.2" />
<p>Figure 9.3 Right pane of Figure 2.2</p>
</div>
<p>To get semi-transparent points:</p>
<div id="ch010.xhtml_cb17" class="sourceCode">
<div class="sourceCode" id="cb66"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.3</span>b <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> diamonds, <span class="at">alpha =</span> <span class="fu">I</span>(<span class="dv">1</span><span class="sc">/</span><span class="dv">100</span>))    </span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.3</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file10.png" alt="Middle pane from Figure 2.3" />
<p>Figure 9.4 Middle pane from Figure 2.3</p>
</div>
<div id="ch010.xhtml_cb18" class="sourceCode">
<div class="sourceCode" id="cb67"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.3</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;price&#39; with labels 0, 5000, 10000 and 15000.
The chart is a set of 53940 points.
The chart has alpha set to 0.01.</code></pre>
<p>To add a smoother (default is loess for n&lt;1000):</p>
<div id="ch010.xhtml_cb20" class="sourceCode">
<div class="sourceCode" id="cb69"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.4</span>a <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> dsmall, <span class="at">geom =</span> <span class="fu">c</span>(<span class="st">&quot;point&quot;</span>, <span class="st">&quot;smooth&quot;</span>))    </span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.4</span>a</span></code></pre></div>
</div>
<pre><code>`geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;</code></pre>
<div class="figure">
<img src="media/file11.png" alt="Left pane of Figure 2.4" />
<p>Figure 9.5 Left pane of Figure 2.4</p>
</div>
<div id="ch010.xhtml_cb22" class="sourceCode">
<div class="sourceCode" id="cb71"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.4</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0.5, 1.0, 1.5, 2.0 and 2.5.
It has y-axis &#39;price&#39; with labels 0, 5000, 10000, 15000 and 20000.
It has 2 layers.
Layer 1 is a set of 100 points.
Layer 2 is a smoothed curve using method &#39;auto&#39; with confidence intervals.</code></pre>
<section
id="ch010.xhtml_plotting-a-continuous-variable-against-a-categorical-variable"
class="level2">
<h2><span class="header-section-number">9.1</span> Plotting a continuous
variable against a categorical variable</h2>
<div id="ch010.xhtml_cb24" class="sourceCode">
<div class="sourceCode" id="cb73"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>a  <span class="ot">=</span> <span class="fu">qplot</span>(color, price <span class="sc">/</span> carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;jitter&quot;</span>)</span>
<span id="cb73-2"><a href="#cb73-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file12.png" alt="Left pane of Figure 2.8" />
<p>Figure 9.6 Left pane of Figure 2.8</p>
</div>
<div id="ch010.xhtml_cb25" class="sourceCode">
<div class="sourceCode" id="cb74"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;color&#39; with labels D, E, F, G, H, I and J.
It has y-axis &#39;price/carat&#39; with labels 5000, 10000 and 15000.
The chart is a set of 53940 points.</code></pre>
<div id="ch010.xhtml_cb27" class="sourceCode">
<div class="sourceCode" id="cb76"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>b <span class="ot">=</span> <span class="fu">qplot</span>(color, price <span class="sc">/</span> carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;boxplot&quot;</span>)    </span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>b</span></code></pre></div>
</div>
<p><img src="media/file13.png" /><!-- --></p>
<div id="ch010.xhtml_cb28" class="sourceCode">
<div class="sourceCode" id="cb77"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.8</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;color&#39; with labels D, E, F, G, H, I and J.
It has y-axis &#39;price/carat&#39; with labels 5000, 10000 and 15000.
The chart is a boxplot comprised of 7 boxes with whiskers.
There is a box at x=D.
It has median 3410.53. The box goes from 2455 to 4749.31, and the whiskers extend to 1128.12 and 8183.33.
There are 338 outliers for this boxplot.
There is a box at x=E.
It has median 3253.66. The box goes from 2430.3 to 4508.41, and the whiskers extend to 1078.12 and 7616.39.
There are 593 outliers for this boxplot.
There is a box at x=F.
It has median 3494.32. The box goes from 2587.1 to 4947.22, and the whiskers extend to 1168 and 8477.5.
There are 585 outliers for this boxplot.
There is a box at x=G.
It has median 3490.38. The box goes from 2538.24 to 5500, and the whiskers extend to 1139.02 and 9937.2.
There are 119 outliers for this boxplot.
There is a box at x=H.
It has median 3818.89. The box goes from 2396.88 to 5127.28, and the whiskers extend to 1051.16 and 9220.
There are 13 outliers for this boxplot.
There is a box at x=I.
It has median 3779.74. The box goes from 2344.65 to 5196.75, and the whiskers extend to 1151.72 and 9397.5.
There are 0 outliers for this boxplot.
There is a box at x=J.
It has median 3780. The box goes from 2562.87 to 4927.95, and the whiskers extend to 1080.65 and 8426.13.
There are 3 outliers for this boxplot.</code></pre>
<p>When seeking to use shading or opaqueness to describe the density of
the points, the fact the size of the points has an impact on the
opaqueness is not currently realised by <code>BrailleR</code>.</p>
<div id="ch010.xhtml_cb30" class="sourceCode">
<div class="sourceCode" id="cb79"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.9</span>b <span class="ot">=</span> <span class="fu">qplot</span>(color, price <span class="sc">/</span> carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;jitter&quot;</span>, <span class="at">alpha =</span> <span class="fu">I</span>(<span class="dv">1</span> <span class="sc">/</span> <span class="dv">50</span>))    </span>
<span id="cb79-2"><a href="#cb79-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.9</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file14.png" alt="Middle pane of Figure 2.9" />
<p>Figure 9.7 Middle pane of Figure 2.9</p>
</div>
<div id="ch010.xhtml_cb31" class="sourceCode">
<div class="sourceCode" id="cb80"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.9</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;color&#39; with labels D, E, F, G, H, I and J.
It has y-axis &#39;price/carat&#39; with labels 5000, 10000 and 15000.
The chart is a set of 53940 points.
The chart has alpha set to 0.02.</code></pre>
<section id="ch010.xhtml_univariate-plots" class="level3">
<h3><span class="header-section-number">9.1.1</span> Univariate
plots</h3>
<div id="ch010.xhtml_cb33" class="sourceCode">
<div class="sourceCode" id="cb82"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>a <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;histogram&quot;</span>)    </span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>a</span></code></pre></div>
</div>
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<div class="figure">
<img src="media/file15.png" alt="Left pane of Figure 2.10" />
<p>Figure 9.8 Left pane of Figure 2.10</p>
</div>
<div id="ch010.xhtml_cb35" class="sourceCode">
<div class="sourceCode" id="cb84"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;&#39; with labels 0, 5000, 10000 and 15000.
The chart is a bar chart containing 30 vertical bars.</code></pre>
<p>Warning: This figure does look different to the original in <span
class="citation" data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> ins spite of
using the same code and same data.</p>
<div id="ch010.xhtml_cb37" class="sourceCode">
<div class="sourceCode" id="cb86"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>b <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;density&quot;</span>)    </span>
<span id="cb86-2"><a href="#cb86-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file16.png" alt="Right pane of Figure 2.10" />
<p>Figure 9.9 Right pane of Figure 2.10</p>
</div>
<div id="ch010.xhtml_cb38" class="sourceCode">
<div class="sourceCode" id="cb87"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.10</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;&#39; with labels 0.0, 0.5, 1.0 and 1.5.
The chart is a type that VI isn&#39;t able to process.</code></pre>
<div id="ch010.xhtml_cb40" class="sourceCode">
<div class="sourceCode" id="cb89"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.11</span>c <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;histogram&quot;</span>, <span class="at">binwidth =</span> <span class="fl">0.01</span>, <span class="at">xlim =</span> <span class="fu">c</span>(<span class="dv">0</span>,<span class="dv">3</span>))    </span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.11</span>c</span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<div class="figure">
<img src="media/file17.png" alt="Right pane of Figure 2.11" />
<p>Figure 9.10 Right pane of Figure 2.11</p>
</div>
<div id="ch010.xhtml_cb42" class="sourceCode">
<div class="sourceCode" id="cb91"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.11</span>c <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2 and 3.
It has y-axis &#39;&#39; with labels 0, 1000 and 2000.
The chart is a bar chart containing 299 vertical bars.</code></pre>
<p>The data is separated by implication in the following graphs. The
legend is automatically generated and has altered in appearance since
the original was prodcued in <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span>.</p>
<div id="ch010.xhtml_cb45" class="sourceCode">
<div class="sourceCode" id="cb94"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>a <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;density&quot;</span>, <span class="at">colour =</span> color)    </span>
<span id="cb94-2"><a href="#cb94-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file18.png" alt="Left pane of Figure 2.12" />
<p>Figure 9.11 Left pane of Figure 2.12</p>
</div>
<div id="ch010.xhtml_cb46" class="sourceCode">
<div class="sourceCode" id="cb95"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;&#39; with labels 0.0, 0.5, 1.0, 1.5 and 2.0.
There is a legend indicating that colour is used to represent color, with 7 levels:
D represented by colour very deep purple, 
E represented by colour vivid purplish blue, 
F represented by colour moderate blue, 
G represented by colour vivid bluish green, 
H represented by colour brilliant green, 
I represented by colour vivid yellow green and 
J represented by colour vivid greenish yellow.
The chart is a type that VI isn&#39;t able to process.</code></pre>
<div id="ch010.xhtml_cb48" class="sourceCode">
<div class="sourceCode" id="cb97"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>b <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;histogram&quot;</span>, <span class="at">fill =</span> color)    </span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>b</span></code></pre></div>
</div>
<pre><code>`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
<div class="figure">
<img src="media/file19.png" alt="Right pane of Figure 2.12" />
<p>Figure 9.12 Right pane of Figure 2.12</p>
</div>
<div id="ch010.xhtml_cb50" class="sourceCode">
<div class="sourceCode" id="cb99"><pre class="sourceCode r"><code class="sourceCode r"><span id="cb99-1"><a href="#cb99-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.12</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 0, 1, 2, 3, 4 and 5.
It has y-axis &#39;&#39; with labels 0, 5000, 10000 and 15000.
There is a legend indicating that fill is used to represent color, with 7 levels:
D represented by fill very deep purple, 
E represented by fill vivid purplish blue, 
F represented by fill moderate blue, 
G represented by fill vivid bluish green, 
H represented by fill brilliant green, 
I represented by fill vivid yellow green and 
J represented by fill vivid greenish yellow.
The chart is a bar chart containing 210 vertical bars.</code></pre>
</section>
<section id="ch010.xhtml_bar-charts-for-categorical-variables"
class="level3">
<h3><span class="header-section-number">9.1.2</span> Bar charts for
categorical variables</h3>
<div id="ch010.xhtml_cb52" class="sourceCode">
<div class="sourceCode" id="cb101"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb101-1"><a href="#cb101-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>a  <span class="ot">=</span> <span class="fu">qplot</span>(color, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;bar&quot;</span>) <span class="co">#geom=&quot;bar&quot; is the default    </span></span>
<span id="cb101-2"><a href="#cb101-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file20.png" alt="Left pane of Figure 2.13" />
<p>Figure 9.13 Left pane of Figure 2.13</p>
</div>
<div id="ch010.xhtml_cb53" class="sourceCode">
<div class="sourceCode" id="cb102"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb102-1"><a href="#cb102-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;color&#39; with labels D, E, F, G, H, I and J.
It has y-axis &#39;&#39; with labels 0, 3000, 6000 and 9000.
The chart is a bar chart containing 7 vertical bars.
Bar 1 is centered horizontally at D, and spans vertically from 0 to 6775.
Bar 2 is centered horizontally at E, and spans vertically from 0 to 9797.
Bar 3 is centered horizontally at F, and spans vertically from 0 to 9542.
Bar 4 is centered horizontally at G, and spans vertically from 0 to 11292.
Bar 5 is centered horizontally at H, and spans vertically from 0 to 8304.
Bar 6 is centered horizontally at I, and spans vertically from 0 to 5422.
Bar 7 is centered horizontally at J, and spans vertically from 0 to 2808.</code></pre>
<p>need to check…</p>
<div id="ch010.xhtml_cb55" class="sourceCode">
<div class="sourceCode" id="cb104"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb104-1"><a href="#cb104-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>b <span class="ot">=</span> <span class="fu">qplot</span>(color, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;bar&quot;</span>, <span class="at">weight =</span> carat)   </span>
<span id="cb104-2"><a href="#cb104-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file21.png" alt="Right pane of Figure 2.13" />
<p>Figure 9.14 Right pane of Figure 2.13</p>
</div>
<div id="ch010.xhtml_cb56" class="sourceCode">
<div class="sourceCode" id="cb105"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb105-1"><a href="#cb105-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>b <span class="ot">=</span> <span class="fu">qplot</span>(color, <span class="at">data =</span> diamonds, <span class="at">geom =</span> <span class="st">&quot;bar&quot;</span>, <span class="at">weight =</span> carat) <span class="sc">+</span> <span class="fu">scale_y_continuous</span>(<span class="st">&quot;carat&quot;</span>)    </span>
<span id="cb105-2"><a href="#cb105-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file22.png" alt="Right pane of Figure 2.13" />
<p>Figure 9.14 Right pane of Figure 2.13</p>
</div>
<div id="ch010.xhtml_cb57" class="sourceCode">
<div class="sourceCode" id="cb106"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb106-1"><a href="#cb106-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.13</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;color&#39; with labels D, E, F, G, H, I and J.
It has y-axis &#39;&#39; with labels 0, 2500, 5000 and 7500.
The chart is a bar chart containing 7 vertical bars.
Bar 1 is centered horizontally at D, and spans vertically from 0 to 4456.56.
Bar 2 is centered horizontally at E, and spans vertically from 0 to 6445.12.
Bar 3 is centered horizontally at F, and spans vertically from 0 to 7028.05.
Bar 4 is centered horizontally at G, and spans vertically from 0 to 8708.28.
Bar 5 is centered horizontally at H, and spans vertically from 0 to 7571.58.
Bar 6 is centered horizontally at I, and spans vertically from 0 to 5568.
Bar 7 is centered horizontally at J, and spans vertically from 0 to 3263.28.</code></pre>
</section>
</section>
<section id="ch010.xhtml_time-series-plots" class="level2">
<h2><span class="header-section-number">9.2</span> Time series
plots</h2>
<p>It looks like the data used in the next graph has been updated since
the publication of <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span></p>
<div id="ch010.xhtml_cb59" class="sourceCode">
<div class="sourceCode" id="cb108"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb108-1"><a href="#cb108-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.14</span>a <span class="ot">=</span> <span class="fu">qplot</span>(date, unemploy <span class="sc">/</span> pop, <span class="at">data =</span> economics, <span class="at">geom =</span> <span class="st">&quot;line&quot;</span>)    </span>
<span id="cb108-2"><a href="#cb108-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.14</span>a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file23.png" alt="Left pane of Figure 2.14" />
<p>Figure 9.15 Left pane of Figure 2.14</p>
</div>
<div id="ch010.xhtml_cb60" class="sourceCode">
<div class="sourceCode" id="cb109"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb109-1"><a href="#cb109-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.14</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;date&#39; with labels 1970, 1980, 1990, 2000 and 2010.
It has y-axis &#39;unemploy/pop&#39; with labels 0.02, 0.03, 0.04 and 0.05.
The chart is a set of 1 line.
Line 1 connects 574 points.</code></pre>
</section>
<section id="ch010.xhtml_path-plots" class="level2">
<h2><span class="header-section-number">9.3</span> Path plots</h2>
<div id="ch010.xhtml_cb62" class="sourceCode">
<div class="sourceCode" id="cb111"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb111-1"><a href="#cb111-1" aria-hidden="true" tabindex="-1"></a>year <span class="ot">&lt;-</span> <span class="cf">function</span>(x) <span class="fu">as.POSIXlt</span>(x)<span class="sc">$</span>year <span class="sc">+</span> <span class="dv">1900</span>    </span>
<span id="cb111-2"><a href="#cb111-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.15</span>b <span class="ot">=</span> <span class="fu">qplot</span>(unemploy <span class="sc">/</span> pop, uempmed, <span class="at">data =</span> economics, <span class="at">geom =</span> <span class="st">&quot;path&quot;</span>, <span class="at">colour=</span><span class="fu">year</span>(date)) </span>
<span id="cb111-3"><a href="#cb111-3" aria-hidden="true" tabindex="-1"></a><span class="co">#+ scale_area() # no longer works</span></span>
<span id="cb111-4"><a href="#cb111-4" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.15</span>b</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file24.png" alt="Right pane of Figure 2.15" />
<p>Figure 9.16 Right pane of Figure 2.15</p>
</div>
<div id="ch010.xhtml_cb63" class="sourceCode">
<div class="sourceCode" id="cb112"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb112-1"><a href="#cb112-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.15</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;unemploy/pop&#39; with labels 0.02, 0.03, 0.04 and 0.05.
It has y-axis &#39;uempmed&#39; with labels 5, 10, 15, 20 and 25.
There is a legend indicating that colour is used to represent year(date), ranging from 1967 represented by colour dark purplish blue to 2015 represented by colour brilliant blue.
The chart is a type that VI isn&#39;t able to process.</code></pre>
</section>
<section id="ch010.xhtml_facets-is-the-ggplot-term-for-trellis-panels"
class="level2">
<h2><span class="header-section-number">9.4</span> Facets is the ggplot
term for trellis’ panels</h2>
<p>The aspect ratio for the plot region is something that needs to be
considered. I’ve manually adjusted the plotting window here so that the
graph more closely matches that of <span class="citation"
data-cites="Wickham2009ggplot2">Wickham (<a
href="#ch014.xhtml#ref-Wickham2009ggplot2">2009</a>)</span> but it is
not an exact match.</p>
<div id="ch010.xhtml_cb65" class="sourceCode">
<div class="sourceCode" id="cb114"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb114-1"><a href="#cb114-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>a <span class="ot">=</span> <span class="fu">qplot</span>(carat, <span class="at">data =</span> diamonds, <span class="at">facets =</span> color <span class="sc">~</span> ., <span class="at">geom =</span> <span class="st">&quot;histogram&quot;</span>, <span class="at">binwidth =</span> <span class="fl">0.1</span>, </span>
<span id="cb114-2"><a href="#cb114-2" aria-hidden="true" tabindex="-1"></a><span class="at">xlim =</span> <span class="fu">c</span>(<span class="dv">0</span>, <span class="dv">3</span>))    </span>
<span id="cb114-3"><a href="#cb114-3" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>a</span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<div class="figure">
<img src="media/file25.png" alt="Left side of Figure 2.16" />
<p>Figure 9.17 Left side of Figure 2.16</p>
</div>
<div id="ch010.xhtml_cb67" class="sourceCode">
<div class="sourceCode" id="cb116"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb116-1"><a href="#cb116-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<pre><code>This is an untitled chart with no subtitle or caption.
The chart is comprised of 7 panels containing sub-charts, arranged vertically.
The panels represent different values of color.
Each sub-chart has x-axis &#39;carat&#39; with labels 0, 1, 2 and 3.
Each sub-chart has y-axis &#39;&#39; with labels 0, 500, 1000, 1500, 2000 and 2500.
Panel 1 represents data for color = D.
Panel 1 is a bar chart containing 29 vertical bars.
Panel 2 represents data for color = E.
Panel 2 is a bar chart containing 29 vertical bars.
Panel 3 represents data for color = F.
Panel 3 is a bar chart containing 29 vertical bars.
Panel 4 represents data for color = G.
Panel 4 is a bar chart containing 29 vertical bars.
Panel 5 represents data for color = H.
Panel 5 is a bar chart containing 29 vertical bars.
Panel 6 represents data for color = I.
Panel 6 is a bar chart containing 29 vertical bars.
Panel 7 represents data for color = J.
Panel 7 is a bar chart containing 29 vertical bars.</code></pre>
<div id="ch010.xhtml_cb70" class="sourceCode">
<div class="sourceCode" id="cb119"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb119-1"><a href="#cb119-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>b <span class="ot">=</span> <span class="fu">qplot</span>(carat, ..density.., <span class="at">data =</span> diamonds, <span class="at">facets =</span> color <span class="sc">~</span> ., <span class="at">geom =</span> <span class="st">&quot;histogram&quot;</span>, <span class="at">binwidth =</span> <span class="fl">0.1</span>, <span class="at">xlim =</span> <span class="fu">c</span>(<span class="dv">0</span>, <span class="dv">3</span>))   </span>
<span id="cb119-2"><a href="#cb119-2" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>b</span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<div class="figure">
<img src="media/file26.png" alt="Right side of Figure 2.16" />
<p>Figure 9.18 Right side of Figure 2.16</p>
</div>
<div id="ch010.xhtml_cb72" class="sourceCode">
<div class="sourceCode" id="cb121"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb121-1"><a href="#cb121-1" aria-hidden="true" tabindex="-1"></a>fig2<span class="fl">.16</span>b <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>Warning: Removed 32 rows containing non-finite values (stat_bin).</code></pre>
<pre><code>This is an untitled chart with no subtitle or caption.
The chart is comprised of 7 panels containing sub-charts, arranged vertically.
The panels represent different values of color.
Each sub-chart has x-axis &#39;carat&#39; with labels 0, 1, 2 and 3.
Each sub-chart has y-axis &#39;..density..&#39; with labels 0.0, 0.5, 1.0, 1.5 and 2.0.
Panel 1 represents data for color = D.
Panel 1 is a bar chart containing 29 vertical bars.
Panel 2 represents data for color = E.
Panel 2 is a bar chart containing 29 vertical bars.
Panel 3 represents data for color = F.
Panel 3 is a bar chart containing 29 vertical bars.
Panel 4 represents data for color = G.
Panel 4 is a bar chart containing 29 vertical bars.
Panel 5 represents data for color = H.
Panel 5 is a bar chart containing 29 vertical bars.
Panel 6 represents data for color = I.
Panel 6 is a bar chart containing 29 vertical bars.
Panel 7 represents data for color = J.
Panel 7 is a bar chart containing 29 vertical bars.</code></pre>
</section>
<section id="ch010.xhtml_rescaling-of-the-axes" class="level2">
<h2><span class="header-section-number">9.5</span> Rescaling of the
axes</h2>
<div id="ch010.xhtml_cb75" class="sourceCode">
<div class="sourceCode" id="cb124"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb124-1"><a href="#cb124-1" aria-hidden="true" tabindex="-1"></a>p26a <span class="ot">=</span> <span class="fu">qplot</span>(carat, price, <span class="at">data =</span> dsmall, <span class="at">log =</span> <span class="st">&quot;xy&quot;</span>)   </span>
<span id="cb124-2"><a href="#cb124-2" aria-hidden="true" tabindex="-1"></a>p26a</span></code></pre></div>
</div>
<div class="figure">
<img src="media/file27.png" alt="First graph on page 26 of " />
<p>Figure 9.19 First graph on page 26 of</p>
</div>
<div id="ch010.xhtml_cb76" class="sourceCode">
<div class="sourceCode" id="cb125"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb125-1"><a href="#cb125-1" aria-hidden="true" tabindex="-1"></a>p26a <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
It has x-axis &#39;carat&#39; with labels 1.
It has y-axis &#39;price&#39; with labels 1000 and 10000.
The chart is a set of 100 points.</code></pre>
<div id="ch010.xhtml_cb78" class="sourceCode">
<div class="sourceCode" id="cb127"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb127-1"><a href="#cb127-1" aria-hidden="true" tabindex="-1"></a>fig3<span class="fl">.6</span> <span class="ot">=</span> <span class="fu">qplot</span>(displ, hwy, <span class="at">data=</span>mpg, <span class="at">facets =</span><span class="sc">~</span> year) <span class="sc">+</span> <span class="fu">geom_smooth</span>()    </span>
<span id="cb127-2"><a href="#cb127-2" aria-hidden="true" tabindex="-1"></a>fig3<span class="fl">.6</span></span></code></pre></div>
</div>
<pre><code>`geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;</code></pre>
<div class="figure">
<img src="media/file28.png" alt="Figure 3.6 of " />
<p>Figure 9.20 Figure 3.6 of</p>
</div>
<div id="ch010.xhtml_cb80" class="sourceCode">
<div class="sourceCode" id="cb129"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb129-1"><a href="#cb129-1" aria-hidden="true" tabindex="-1"></a>fig3<span class="fl">.6</span> <span class="sc">%&gt;%</span> <span class="fu">VI</span>()   </span></code></pre></div>
</div>
<pre><code>This is an untitled chart with no subtitle or caption.
The chart is comprised of 2 panels containing sub-charts, arranged horizontally.
The panels represent different values of year.
Each sub-chart has x-axis &#39;displ&#39; with labels 2, 3, 4, 5, 6 and 7.
Each sub-chart has y-axis &#39;hwy&#39; with labels 20, 30 and 40.
Each sub-chart has 2 layers.
Panel 1 represents data for year = 1999.
Layer 1 of panel 1 is a set of 117 points.
Layer 2 of panel 1 is a smoothed curve using method &#39;auto&#39; with confidence intervals.
Panel 2 represents data for year = 2008.
Layer 1 of panel 2 is a set of 117 points.
Layer 2 of panel 2 is a smoothed curve using method &#39;auto&#39; with confidence intervals.</code></pre>
<!--chapter:end:09-GGPlot.Rmd-->
</section>
</section>
<p><span id="ch011.xhtml"></span></p>
<section id="ch011.xhtml_WriteR" class="level1">
<h1><span class="header-section-number">10</span> Getting started with
the WriteR application</h1>
<p>The WriteR application was written to support use of R markdown and
the <code>BrailleR</code> package. It is a Python script making use of
wxPython to help build the graphic user interface (GUI) in such a way
that it works for screen reader users. This book has been written in R
markdown, and the author has made extensive use of WriteR because it
offers so many convenient tools for a blind user wanting to write R
markdown files.</p>
<p>The script is in the <code>BrailleR</code> package, but it cannot run
unless the user has both Python and wxPython installed. Commands have
been included in the <code>BrailleR</code> package to help Windows users
obtain installation files for them. Users of other operating systems
currently have to install Pandoc, Python and WxPython independently, but
these tools may well already be installed.</p>
<section
id="ch011.xhtml_getting-the-required-software-windows-users-only"
class="level2">
<h2><span class="header-section-number">10.1</span> Getting the required
software (Windows users only)</h2>
<p>You can check if a version of Python is already installed on your
computer using</p>
<div id="ch011.xhtml_cb1" class="sourceCode">
<div class="sourceCode" id="cb131"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb131-1"><a href="#cb131-1" aria-hidden="true" tabindex="-1"></a><span class="fu">Sys.which</span>(<span class="st">&quot;Python&quot;</span>)</span></code></pre></div>
</div>
<pre><code>##                     Python 
## &quot;C:\\Python27\\Python.exe&quot;</code></pre>
<p>The output above shows you that I have Python 2.7 installed on my
computer, and that it can be found in the folder I know is the default
location. You can use this command later to check your progress, but
there are other ways to check that return more useful detail What it
does not show you is whether the installation of Python is suited for a
64 bit machine, or is the more universal 32 bit installation. We must
have an exact match between the version of Python 2.7 and the version of
R being used.</p>
<p>The files downloaded as a consequence of running commands in this set
of instructions will be saved in your <code>MyBrailleR</code> folder.
You will need to follow the instructions and answer questions that arise
whenever you install new software, but you should probably read all the
way through this set of instructions before getting underway.</p>
<p>Ultimately, you will need a mainstream tool to process the markdown
files you write into other formats. The WriteR application will end up
using a tool called “pandoc” to do this so we need to get this
installed. If you do not have an installation of Pandoc and Python
(either 2.7 or 3) then you can use some functions from the
<code>BrailleR</code> package to help make the setup smoother. Remember
to load the package using:</p>
<p><code>library(BrailleR)</code></p>
<p>It doesn’t matter if you install Python before or after Pandoc. Let’s
first install Pandoc using the command:</p>
<p><code>GetPandoc()</code></p>
<p>There are two sets of instructions from this point onwards; you will
follow only one of them. These instructions fetch the installation files
from the reputable Python sites. Windows and any security software you
might have should know that, but you can never tell! You will may need
to let Windows know it is OK to install the software in the default
location. The pop-up might not appear as the window with focus so if
things look like they’re going slowly, look around for the pop-up
window.</p>
<section id="ch011.xhtml_i-do-not-have-python-3-installed"
class="level3">
<h3><span class="header-section-number">10.1.1</span> I do not have
Python 3 installed</h3>
<p>You do not need to install Python 2.7 if you already have Python 3;
the WriteR application will work with either version of Python. I prefer
to recommend that you install Python 2.7 here because it helps with a
variety of other tools found in the <code>BrailleR</code> package.</p>
<p>The following commands automatically download the installation files
needed for Python 2.7, and start the installation process going. Issue
them at the R prompt</p>
<p><code>GetPython27()</code></p>
<p>As the installer proceeds, there is one small matter to resolve. You
need to make sure that as part of the installation, the Python folders
are added to your system path. This makes it possible to run Python
scripts from any folder on your computer and for R to see where to find
Python. The next few commands will fail if this is not done properly. If
you missed that step during the installation, look for the installer
file in your <code>MyBrailleR</code> folder and run it again manually
before proceeding.</p>
<p>We can check the installation has worked properly at this point
using:</p>
<div id="ch011.xhtml_cb3" class="sourceCode">
<div class="sourceCode" id="cb133"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb133-1"><a href="#cb133-1" aria-hidden="true" tabindex="-1"></a>reticulate<span class="sc">::</span><span class="fu">py_config</span>()</span></code></pre></div>
</div>
<pre><code>## python:         C:\Python27\python.exe
## libpython:      python27.dll
## pythonhome:     C:\Python27
## version:        2.7.15 (v2.7.15:ca079a3ea3, Apr 30 2018, 16:30:26) [MSC v.1500 64 bit (AMD64)]
## Architecture:   64bit
## numpy:           [NOT FOUND]
## 
## python versions found: 
##  C:\Python27\python.exe
##  C:\Python27\\python.exe</code></pre>
<p>This is a much stronger set of tests than was done earlier. In
particular, the <code>reticulate</code> package makes sure that the
installation of Python and R are both using a 32 bit, or if appropriate
for your computer, a 64 bit installation.</p>
<p>Now get the additional Python modules needed for WriteR using:</p>
<p><code>GetWxPython27()</code></p>
<p>Once you have completed these installations, you are ready to go. You
shouldn’t need to keep the installation files, but why not keep them
just in case. You can now skip to the section which shows you how to
check everything is ready for using WriteR.</p>
</section>
<section id="ch011.xhtml_i-do-have-python-3-installed" class="level3">
<h3><span class="header-section-number">10.1.2</span> I do have Python 3
installed</h3>
<p>If you have Python 3 on your system, it is still worth installing it
again so that it gets updated to the most recent release. Use</p>
<p><code>GetPython3()</code></p>
<p>Instructions for getting the wx module for Python 3 installed need
completion. Help from a Python 3 user is clearly needed, but the latest
approach using a pip command should be promising.</p>
<p>Once you have completed these installations, you are ready to go. You
shouldn’t need to keep the installation files, but why not keep them
just in case.</p>
</section>
</section>
<section id="ch011.xhtml_other-operating-systems" class="level2">
<h2><span class="header-section-number">10.2</span> Other operating
systems</h2>
</section>
<section id="ch011.xhtml_checking-your-system-is-ready" class="level2">
<h2><span class="header-section-number">10.3</span> Checking your system
is ready</h2>
<p>All going to plan, you should now have Python on your system, and the
additional wxPython modules as well. You only need to check that R
really can see the right version of Python, and that one extra Python
module is correctly installed and available to R to find out how well
you’ve done, using:</p>
<div id="ch011.xhtml_cb5" class="sourceCode">
<div class="sourceCode" id="cb135"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb135-1"><a href="#cb135-1" aria-hidden="true" tabindex="-1"></a>reticulate<span class="sc">::</span><span class="fu">py_available</span>(<span class="cn">TRUE</span>)</span></code></pre></div>
</div>
<pre><code>## [1] TRUE</code></pre>
<div id="ch011.xhtml_cb7" class="sourceCode">
<div class="sourceCode" id="cb137"><pre
class="sourceCode r"><code class="sourceCode r"><span id="cb137-1"><a href="#cb137-1" aria-hidden="true" tabindex="-1"></a>reticulate<span class="sc">::</span><span class="fu">py_module_available</span>(<span class="st">&quot;wx&quot;</span>)</span></code></pre></div>
</div>
<pre><code>## [1] TRUE</code></pre>
<p>The outcome of this second command tells you if your system is ready
to run the WriteR application.</p>
</section>
<section id="ch011.xhtml_opening-writer-from-brailler" class="level2">
<h2><span class="header-section-number">10.4</span> Opening WriteR from
BrailleR</h2>
<p>Opening WriteR is as easy as typing WriteR! Well almost. You have the
option of specifying a filename; if that file exists, it gets opened for
you, and if it doesn’t exist, then it gets created with a few lines
already included at the top to help get you started. Try:</p>
<p><code>WriteR("MyFirst.Rmd")</code></p>
</section>
<section id="ch011.xhtml_what-can-i-do-with-writer" class="level2">
<h2><span class="header-section-number">10.5</span> What can I do with
WriteR?</h2>
<p>The window you are in has a number of menus, a status bar at the
bottom and a big space in the middle for your work. Take a quick look at
those menus; some will look familiar because they are common to many
Windows applications.</p>
<p>The file you have opened is a markdown file. It is just text which is
why it is so easy to read. The file extension of <code>Rmd</code> means
it is an R markdown file. There are several flavours of markdown in
common use, but they are practically all the same except for some very
minor differences.</p>
<p>A markdown file can be converted into many file formats for
distribution. These include HTML, pdf, Microsoft Word, Open Office, and
a number of different slide presentation formats. Let’s make the HTML
file now.</p>
</section>
<section id="ch011.xhtml_our-first-html-file" class="level2">
<h2><span class="header-section-number">10.6</span> Our first HTML
file</h2>
<p>Making your first HTML file is as easy as hitting the <code>f5</code>
key, or using one of the options in the <code>Build</code> menu. The
variety of options are the commonly used ones in RStudio. Let’s just
stick to making an HTML file for the time being. You can investigate
other formats later.</p>
<p>When the processing is underway, a second window will open which
gives the same output that you would see printed in an R session window
if you were processing R markdown files manually. If the last line says
“done 0”, then everything processed properly; if it says “done 1” then
there was an error to fix, so look through this log to see what went
wrong.</p>
<p>The processing of your R markdown document will use a suite of
packages, primarily including the <code>knitr</code> <span
class="citation" data-cites="Rpkg-knitr">(Xie <a
href="#ch014.xhtml#ref-Rpkg-knitr">2018</a>)</span> and
<code>rmarkdown</code> <span class="citation"
data-cites="Rpkg-rmarkdown">(<span class="citeproc-not-found"
data-reference-id="Rpkg-rmarkdown"><strong>???</strong></span>)</span>
packages. Press the <code>f4</code> key to switch back to the main
document editing window in WriteR.</p>
<p>If the processing of the file “MyFirst.Rmd” was successful, then you
will now have a file called “MyFirst.html” in your current working
directory. You have several choices for finding the HTML file you have
created:</p>
<ul>
<li>Navigate to the current working directory using your file browser.
To find out where that is, type <code>getwd()</code> in the R window to
see where the files really are located. You should see the file
<code>MyFirst.Rmd</code> and once you have built it, the associated HTML
file. Open that file in your browser.</li>
<li>Use the <code>browseURL()</code> command in the R session. You will
need to provide the filename, in quotes, for example
<code>browseURL("MyFirst.html")</code></li>
</ul>
<p>Use one of these methods to open the HTML file. Read through it to
see how the markdown has been rendered. You may need to switch back and
forth between the WriteR window and your browser to compare the plain
text and the beautiful HTML. If you didn’t actually edit the R markdown
file up to now then the output HTML file will be rather boring. Add in
some text, or use the menus to see how to insert headings and other
things.</p>
<p>N.B. Changes in your R markdown file are not automatically converted
into the HTML file. You must re-build the HTML, and refresh your browser
to see the impact of any changes you make, both actions use the
<code>f5</code> key.</p>
</section>
<section id="ch011.xhtml_brailler-commands-used-in-this-chapter-5"
class="level2">
<h2><span class="header-section-number">10.7</span> BrailleR commands
used in this chapter</h2>
<p>We needed to use either <code>GetPython27()</code> and
<code>GetWxPython27()</code> or <code>GetPython3()</code> to install the
necessary software to allow us to run a Python script like WriteR. We
then opened a new file using <code>WriteR()</code>.</p>
<!--chapter:end:10-IntroWriteR.Rmd-->
</section>
</section>
<p><span id="ch012.xhtml"></span></p>
<section id="ch012.xhtml_AccessibleGraphs" class="level1">
<h1><span class="header-section-number">11</span> Making Accessible
Graphs</h1>
<p>While the initial aim of the BrailleR Project was to create a text
description of a graph, there are many ways to explore graphs created in
R by other means. This chapter introduces some techniques for creating
or modifying graphs so that they can be investigated by a blind person
without the assistance of a sighted person.</p>
<section id="ch012.xhtml_incomplete" class="level2">
<h2><span class="header-section-number">11.1</span> incomplete</h2>
<!--chapter:end:11AccessibleGraphs.Rmd-->
</section>
</section>
<p><span id="ch013.xhtml"></span></p>
<section id="ch013.xhtml_LookingAhead" class="level1">
<h1><span class="header-section-number">12</span> The Work Ahead</h1>
<p>The <code>BrailleR</code> Project is likely to evolve over time. The
work on the project will be dependent on interest being shown by blind
users of R, and perhaps some willingness being shown by people who could
make the work so much easier.</p>
<p>Developments that meet specific requests from blind users are being
addressed. For example, the request from one user to have the
<code>BrailleR</code> package loaded in every session led to creation of
a <code>MakeRprofile()</code> function; this function simplifies the
experience for the user (a novice) for creation of the
<code>.Rprofile</code> file in the current working directory. This is
easier to explain to a novice than the process of altering the
<code>.Rprofile</code> or <code>.Rprofile.site</code> files.</p>
<p>A request for assistance getting braille labels onto graphs has
brought forward the plans to address this issue within the
<code>BrailleR</code> package. The experimental <code>BRLThis()</code>
function has been included in the package, as well as a similar
<code>SVGThis()</code> function to optimise the settings for creation of
a version using a braille font and a structured SVG file for a graph.
The <code>BRLThis()</code> function creates a pdf document that has been
successfully embossed on two different models of embosser, while SVG
files generated by the <code>SVGThis()</code> function have only the
bare minimum of useful content at this stage.</p>
<p>It may prove necessary for the <code>BRLThis()</code> function to be
converted to a method like the <code>SVGThis()</code> functions so that
the best results can be created for different graph types. At present,
the <code>SVGThis()</code> is reliant on the existence of the
<code>hist()</code> and <code>boxplot()</code> commands within the
<code>BrailleR</code> package that are wrappers to the
<code>graphics</code> package functions of the same name. It is my hope
that I can encourage the R development core team to create more classes.
The additions are almost trivial from their perspective, but the
workload for me as a programmer will reduce markedly if I can write
simpler code to interpret the graphs. Knowing what type of graph has
been created by an object rather than writing code that makes a
reasonable attempt at guessing what type of graph was created is a key
example. To this end, it will prove easier to work with the graphs
created by the <code>xyplot()</code> function from the
<code>lattice</code> package than the standard <code>plot()</code>
command.</p>
<p>I will also need feedback from students and users of R, and perhaps
their lecturers, tutors, and teachers, to see which ideas are working
well for blind users. At present, the attempts being made are based on
my own experiences and desires; I wanted functions to convert an R
script to an R markdown file and a similr function to convert the
history of commands to an Rmd file. The <code>R2Rmd()</code> and
<code>History2Rmd()</code> functions were duly created; they have proven
very useful in my work. I can only hoep others find them as useful. I
am, therefore, seeking opportunities to share my work with blind users
all over the world via a specially created email list for those people
interested in how blind users can work with R{}. I believe that adding
perspectives is a crucial pathway for the project’s development and all
feedback is extremely welcome.</p>
<p>A key contribution is possible in the area of choosing appropriate
default text for the <code>BrailleR</code> output. The text
representation needs to be more efficient than using R in its vanilla
form. To this end, I have put some time into thinking about which text
will be most suitable for an audience that will often listen to the
output using synthetic speech, perhaps in the user’s second language, as
well as the braille readers who may or may not be able to use contracted
English braille. At first, I had thought this task would be made easier
by reviewing resources created by transcribers who record books for the
blind, but my investigations show that the descriptions used in spoken
words do not always equate to efficient braille or synthetic speech and
often provide more interpretation than I believe is appropriate in
educational settings.</p>
<p>Collaboration from others in any role will feed my own enthusiasm for
the project, especially those whose skills and knowledge complement my
own. The work of willing and helpful contributors has been gratefully
received. In some instances, other researchers in the R community have
inadvertently contributed to <code>BrailleR</code> because I have been
able to adapt their work to meet the needs of blind users.</p>
<!--chapter:end:95TheWorkAhead.Rmd-->
</section>
<p><span id="ch014.xhtml"></span></p>
<section id="ch014.xhtml_references-3" class="level1">
<h1><span class="header-section-number">13</span> References</h1>
<!--chapter:end:99Bib.Rmd-->
<div id="ch014.xhtml_refs" class="references">
<div id="ch014.xhtml_ref-BulatovGardner2004SVG">
<p>Bulatov, Vladimir, and John A. Gardner. 2004. “Making Graphics
Accessible.” In <em>SVG Open Conference</em>. Tokyo. <a
href="http://www.svgopen.com/2004/papers/SVGOpen2004MakingGraphicsAccessible/"
class="uri">http://www.svgopen.com/2004/papers/SVGOpen2004MakingGraphicsAccessible/</a>.</p>
</div>
<div id="ch014.xhtml_ref-CalderEtAl2006">
<p>Calder, M., R. Cohen, J. Lanzoni, and Y. Xu. 2006. “PLUMB: An
Interface for Users Who Are Blind to Display, Create and Modify Graphs.”
<em>ASSETS’06</em>, 263–64. <a
href="http://www.catea.gatech.edu/scitrain/kb/FullText_Articles/PLUMB.pdf"
class="uri">http://www.catea.gatech.edu/scitrain/kb/FullText_Articles/PLUMB.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-xtable">
<p>Dahl, David B. 2016. <em>Xtable: Export Tables to Latex or Html</em>.
<a href="https://CRAN.R-project.org/package=xtable"
class="uri">https://CRAN.R-project.org/package=xtable</a>.</p>
</div>
<div id="ch014.xhtml_ref-SVGStandard">
<p>Dengler, P., D. Jackson, C. Lilley, J. Fujisawa, C. McCormack, E.
Dahlström, A. Grasso, J. Ferraiolo, D. Schepers, and J. Watt. 2011.
<em>Scalable Vector Graphics (Svg) 1.1</em>. Second. W3C recommendation,
W3C. <a href="http://www.w3.org/TR/2011/REC-SVG11-20110816/"
class="uri">http://www.w3.org/TR/2011/REC-SVG11-20110816/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Fellows2012Deducer">
<p>Fellows, Ian. 2012. “Deducer: A Data Analysis GUI for R.” <em>Journal
of Statistical Software</em> 49 (8):1–15. <a
href="http://www.jstatsoft.org/v49/i08"
class="uri">http://www.jstatsoft.org/v49/i08</a>.</p>
</div>
<div id="ch014.xhtml_ref-Fox2005-RCommander">
<p>Fox, John. 2005. “The R Commander: A Basic Statistics Graphical User
Interface to R.” <em>Journal of Statistical Software</em> 14 (9):1–42.
<a href="http://www.jstatsoft.org/v14/i09"
class="uri">http://www.jstatsoft.org/v14/i09</a>.</p>
</div>
<div id="ch014.xhtml_ref-JAWS">
<p>Freedom Scientific. 2018. <em>JAWS Version 2018.1805.33</em>. St.
Petersburg, FL: Freedom Scientific. <a
href="http://www.freedomscientific.com/"
class="uri">http://www.freedomscientific.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-GardnerBulatov2010SVG">
<p>Gardner, John, and Vladimir Bulatov. 2010. “Highly Accessible
Scientific Graphical Information Through Daisy Svg.” In <em>Proceedings
of the 2010 Svgopen Conference, Paris, France</em>. <a
href="http://www.svgopen.org/2010/papers/56-Highly_Accessible_Scientific_Graphical_Information_through_DAISY_SVG/index.html"
class="uri">http://www.svgopen.org/2010/papers/56-Highly_Accessible_Scientific_Graphical_Information_through_DAISY_SVG/index.html</a>.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2009AccessiblePaper">
<p>Godfrey, A. Jonathan R. 2009. “Are Statistics Courses Accessible?” In
<em>Proceedings of the Workshop on E-Inclusion in Mathematics and
Science 2009</em>, 72–80. Fukuoka, Japan.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2011SU-R">
<p>———. 2011. “R.” Telc, The Czech Republic.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2012PuttingPaper">
<p>———. 2012a. “Putting It All Together — a Blind Person’s Perspective
on Document Preparation.” In <em>Proceedings of Digitization and
E-Inclusion in Mathematics and Science</em>, edited by Katsuhito
Yamaguchi and Masakazu Suzuki, 135–41. Tokyo, Japan.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2012BrailleRPaper">
<p>———. 2012b. “The BrailleR Project.” In <em>Proceedings of
Digitization and E-Inclusion in Mathematics and Science</em>, edited by
Katsuhito Yamaguchi and Masakazu Suzuki, 89–95. Tokyo, Japan.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2013SU-R">
<p>———. 2013a. “Using R: The Most Accessible Statistical Software for
Blind Students.” Bad Herrenalb, Germany.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyRJournal">
<p>———. 2013b. “Statistical Software from a Blind Person’s Perspective:
R Is the Best, but We Can Make It Better.” <em>The R Journal</em> 5
(1):73–79. <a
href="%20https://journal.r-project.org/archive/2013-1/godfrey.pdf%20">https://journal.r-project.org/archive/2013-1/godfrey.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2013BlindnessPoster">
<p>———. 2013c. “Blindness in a Visual Discipline.” University of
Waikato, Hamilton.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2014SU-StatsSoft">
<p>———. 2014a. “A Review of Statistical Software for Blind Students.”
Paris, France.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2014SU-R">
<p>———. 2014b. “Introduction to R: The Most Accessible Statistical
Software for Blind Students.” Paris, France.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2014BlindUseROral">
<p>———. 2014c. “Practical Use of R by Blind People.” University of
California, Los Angeles.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2014SU-Sweave">
<p>———. 2014d. “R and LaTeX — a Powerful Combination for Assignment
Preparation.” Paris, France.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2015BaseRWeepsOral">
<p>———. 2015. “While My Base R Gently Weeps.” Aalborg, Denmark.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2016SU-StatsSoft">
<p>———. 2016a. “A Review of Statistical Software for Blind Students.”
Linz, Austria.</p>
</div>
<div id="ch014.xhtml_ref-Godfrey2016SU-R">
<p>———. 2016b. “Introduction to R: The Most Accessible Statistical
Software for Blind Students.” Linz, Austria.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyBilton2016UseROral">
<p>Godfrey, A. Jonathan R., and Timothy P. Bilton. 2016. “R Markdown:
Lifesaver or Death Trap?” Stanford University, California.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyCurtis2016WriteRPaper">
<p>Godfrey, A. Jonathan R., and James M. P. Curtis. 2016. “Simple
Authoring of Statistical Analyses by and for Blind People.” In
<em>Proceedings of the International Workshop on Digitization and
E-Inclusion in Mathematics and Science 2016</em>, edited by Katsuhito
Yamaguchi and Masakazu Suzuki, 47–54. Kanegawa, Japan. <a
href="http://workshop.sciaccess.net/DEIMS2016/index.html"
class="uri">http://workshop.sciaccess.net/DEIMS2016/index.html</a>.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyErhardtRJournalAddendum">
<p>Godfrey, A. Jonathan R., and Robert Erhardt. 2014. “Addendum to
“Statistical Software from a Blind Person’s Perspective".” <em>The R
Journal</em> 6 (1):182. <a
href="https://journal.r-project.org/archive/2014-1/godfrey-erhardt.pdf"
class="uri">https://journal.r-project.org/archive/2014-1/godfrey-erhardt.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyLoots2014JSS">
<p>Godfrey, A. Jonathan R., and M. Theodor Loots. 2014. “Statistical
Software (R, SAS, SPSS, and Minitab) for Blind Students and
Practitioners.” <em>Journal of Statistical Software, Software
Reviews</em> 58 (1):1–25. <a href="https://www.jstatsoft.org/v58/s01"
class="uri">https://www.jstatsoft.org/v58/s01</a>.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyLoots-JSE">
<p>———. 2015. “Advice from Blind Teachers on How to Teach Statistics to
Blind Students.” <em>Journal of Statistics Education</em> 23 (3):1–28.
<a href="http://www.amstat.org/publications/jse/v23n3/godfrey.pdf"
class="uri">http://www.amstat.org/publications/jse/v23n3/godfrey.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-GodfreyMurrell2016TactileGraphsPaper">
<p>Godfrey, A. Jonathan R., and Paul Murrell. 2016. “Statistical Graphs
Made Tactile.” In <em>Proceedings of the International Workshop on
Digitization and E-Inclusion in Mathematics and Science 2016</em>,
edited by Katsuhito Yamaguchi and Masakazu Suzuki, 69–74. Kanegawa,
Japan.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-BrailleR">
<p>Godfrey, A. Jonathan R., Debra Warren, Paul Murrell, Timothy Bilton,
and Volker Sorge. 2018. <em>BrailleR: Improved Access for Blind
Users</em>. <a href="https://CRAN.R-project.org/package=BrailleR"
class="uri">https://CRAN.R-project.org/package=BrailleR</a>.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-nortest">
<p>Gross, Juergen, and Uwe Ligges. 2015. <em>Nortest: Tests for
Normality</em>. <a href="https://CRAN.R-project.org/package=nortest"
class="uri">https://CRAN.R-project.org/package=nortest</a>.</p>
</div>
<div id="ch014.xhtml_ref-SPSS-Soft">
<p>Inc., SPSS. 2012. <em>IBM SPSS Statistics 21</em>. Chicago, IL: SPSS
Inc. <a href="http://www.spss.com/"
class="uri">http://www.spss.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-SPLUS-Soft">
<p>Insightful Corp. 2003. <em>S-PLUS Version 6.2</em>. Seattle, WA. <a
href="http://www.insightful.com/"
class="uri">http://www.insightful.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-moments">
<p>Komsta, Lukasz, and Frederick Novomestky. 2015. <em>Moments: Moments,
Cumulants, Skewness, Kurtosis and Related Tests</em>. <a
href="https://CRAN.R-project.org/package=moments"
class="uri">https://CRAN.R-project.org/package=moments</a>.</p>
</div>
<div id="ch014.xhtml_ref-Minitab-Soft">
<p>Minitab Inc. 2012. <em>Minitab Statistical Software
Version 16.2.3</em>. State College, PA: Minitab Inc. <a
href="http://www.minitab.com/"
class="uri">http://www.minitab.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Minitab-Express">
<p>———. 2014. <em>Minitab Express Statistical Software Version </em>.
State College, PA: Minitab Inc. <a href="http://www.minitab.com/"
class="uri">http://www.minitab.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Murrell2015GridGraphics">
<p>Murrell, Paul. 2015. “The gridGraphics Package.” <em>The R
Journal</em> 7 (1):151–62. <a
href="http://journal.r-project.org/archive/2015-1/murrell.pdf"
class="uri">http://journal.r-project.org/archive/2015-1/murrell.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-MurrellPotter2014">
<p>Murrell, Paul, and Simon Potter. 2014. “The gridSVG Package.” <em>The
R Journal</em> 6 (1):133–43. <a
href="http://journal.r-project.org/archive/2014-1/RJournal_2014-1_murrell-potter.pdf"
class="uri">http://journal.r-project.org/archive/2014-1/RJournal_2014-1_murrell-potter.pdf</a>.</p>
</div>
<div id="ch014.xhtml_ref-NVDA">
<p>NVDA Team. 2018. <em>NVDA Version 2018.1.1</em>. <a
href="http://www.nvaccess.org/"
class="uri">http://www.nvaccess.org/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-base">
<p>R Core Team. 2018. <em>R: A Language and Environment for Statistical
Computing</em>. Vienna, Austria: R Foundation for Statistical Computing.
<a href="https://www.R-project.org/"
class="uri">https://www.R-project.org/</a>.</p>
</div>
<div id="ch014.xhtml_ref-RoedigerEtAl2012RKWard">
<p>Rödiger, Stefan, Thomas Friedrichsmeier, Prasenjit Kapat, and Meik
Michalke. 2012. “RKWard: A Comprehensive Graphical User Interface and
Integrated Development Environment for Statistical Analysis with R.”
<em>Journal of Statistical Software</em> 49 (9):1–34. <a
href="http://www.jstatsoft.org/v49/i09"
class="uri">http://www.jstatsoft.org/v49/i09</a>.</p>
</div>
<div id="ch014.xhtml_ref-RStudio">
<p>RStudio. 2018. <em>RStudio: Integrated Development Environment for R,
Version 1.1.453</em>. Boston, MA: RStudio. <a
href="http://www.rstudio.com/"
class="uri">http://www.rstudio.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-SAS-Soft">
<p>SAS Institute Inc. 2010. <em>SAS/STAT Software, Version 9.3</em>.
Cary, NC: SAS Institute Inc. <a href="http://www.sas.com/"
class="uri">http://www.sas.com/</a>.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-TeachingDemos">
<p>Snow, Greg. 2016. <em>TeachingDemos: Demonstrations for Teaching and
Learning</em>. <a
href="https://CRAN.R-project.org/package=TeachingDemos"
class="uri">https://CRAN.R-project.org/package=TeachingDemos</a>.</p>
</div>
<div id="ch014.xhtml_ref-Wickham2009ggplot2">
<p>Wickham, Hadley. 2009. <em>ggplot2: Elegant Graphics for Data
Analysis</em>. New York: Springer.</p>
</div>
<div id="ch014.xhtml_ref-Rpkg-knitr">
<p>Xie, Yihui. 2018. <em>Knitr: A General-Purpose Package for Dynamic
Report Generation in R</em>. <a
href="https://CRAN.R-project.org/package=knitr"
class="uri">https://CRAN.R-project.org/package=knitr</a>.</p>
</div>
</div>
</section>
</body>
</html>
